{"version":3,"sources":["Redux/Reducers/registerReducer.js","Redux/Reducers/memoryReducer.js","Redux/Reducers/rootReducer.js","Redux/store.js","res/logo.png","Components/Navbar.jsx","Components/Registers.jsx","Components/Editor.jsx","Components/MemoryViews/EntireMemoryView.jsx","Components/MemoryViews/LoadedMemoryView.jsx","Components/Memory.jsx","Components/Body.jsx","App.jsx","index.jsx"],"names":["initialState","primaryRegisters","A","B","C","D","E","H","L","M","flagRegisters","S","Z","AC","P","CY","memory","Array","fill","map","i","combineReducers","registerReducer","state","action","type","concat","text","memoryReducer","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","logger","Navbar","props","handleProjectName","e","newWidth","target","value","length","setState","projectName","styles","width","handleEnter","keyCode","className","src","Logo","alt","this","onChange","onKeyDown","style","Component","Registers","handleDecChange","decNumber","hexNumber","binNumber","isNaN","parseInt","toString","toUpperCase","dec","hex","bin","handleHexChange","handleBinChange","connect","Editor","EntireMemoryView","onRightNav","visible","onLeftNav","nextProps","vis","Math","floor","jumpTo","starting","ending","slice","row","index","Fragment","onClick","ownProps","LoadedMemoryView","Memory","onMemoryViewChange","memoryView","onJumpToChange","test","jumpText","onJumpEnter","key","placeholder","name","checked","Body","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b314d08a.chunk.js","sourcesContent":["const initialState = {\n    primaryRegisters: {\n        A: \"00\",\n        B: \"00\",\n        C: \"00\",\n        D: \"00\",\n        E: \"00\",\n        H: \"00\",\n        L: \"00\",\n        M: \"00\",\n    },\n\n    flagRegisters: {\n        S: \"00\",\n        Z: \"00\",\n        AC: \"00\",\n        P: \"00\",\n        CY: \"00\",\n    },\n};\n\nexport default function registers(state = initialState, action) {\n    switch (action.type) {\n        case \"TEST\":\n            return state.concat([action.text]);\n        default:\n            return state;\n    }\n}\n","const initialState = {\n    memory: new Array(4095).fill(0).map((i) => {\n        return new Array(16).fill(0);\n    }),\n};\n\nexport default function memory(state = initialState, action) {\n    switch (action.type) {\n        case \"TEST\":\n            return state.concat([action.text]);\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\nimport registerReducer from \"./registerReducer\";\nimport memoryReducer from \"./memoryReducer\";\n\nexport default combineReducers({\n    registerReducer,\n    memoryReducer,\n});\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { logger } from \"redux-logger\";\nimport rootReducer from \"./Reducers/rootReducer\";\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(logger))\n);\n\nexport default store;\n","export default __webpack_public_path__ + \"static/media/logo.1b285e8d.png\";","import React, { Component } from \"react\";\n\nimport \"./Styles/NavBarStyles.scss\";\nimport Logo from \"../res/logo.png\";\n\nexport class Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            projectName: \"Untitled\",\n            styles: {\n                width: \"80px\",\n            },\n        };\n    }\n\n    handleProjectName = (e) => {\n        var newWidth = (e.target.value.length + 3) * 8;\n        newWidth = newWidth > 176 ? 176 : newWidth;\n        this.setState({\n            projectName: e.target.value,\n            styles: {\n                width: newWidth + \"px\",\n            },\n        });\n    };\n\n    handleEnter = (e) => {\n        if (e.keyCode === 13) {\n            e.keyCode = 9;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <div className=\"navbar-items\">\n                    <ul className=\"navbar-head\">\n                        <li className=\"navbar-item\">\n                            <div className=\"logo-container\">\n                                <img\n                                    src={Logo}\n                                    alt=\"8085 Sim\"\n                                    className=\"logo\"\n                                />\n                            </div>\n                        </li>\n                        <li className=\"navbar-item\">\n                            <ul className=\"projDetails\">\n                                <li className=\"projectName\">\n                                    <input\n                                        type=\"text\"\n                                        value={this.state.projectName}\n                                        onChange={this.handleProjectName}\n                                        onKeyDown={this.handleEnter}\n                                        style={this.state.styles}\n                                    />\n                                    <i className=\"fas fa-pen\"></i>\n                                </li>\n                                <li className=\"projectAuthor\">Sidhant</li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <ul className=\"navbar-tail\">\n                        <li className=\"navbar-item\">\n                            <i className=\"fas fa-play\"></i>\n                            Run\n                        </li>\n                        <li className=\"navbar-item\">\n                            <i className=\"fas fa-save\"></i>\n                            Save\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Styles/BodyStyles.scss\";\n\nexport class Registers extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dec: \"\",\n            hex: \"\",\n            bin: \"\",\n        };\n    }\n\n    handleDecChange = (e) => {\n        if (isNaN(e.target.value)) {\n            return;\n        }\n\n        var decNumber;\n        var hexNumber;\n        var binNumber;\n\n        if (e.target.value.length === 0) {\n            decNumber = \"\";\n            hexNumber = \"\";\n            binNumber = \"\";\n        } else {\n            decNumber = parseInt(e.target.value);\n            hexNumber = decNumber.toString(16).toUpperCase();\n            binNumber = (decNumber >>> 0).toString(2);\n        }\n\n        this.setState({\n            dec: \"\" + decNumber,\n            hex: \"\" + hexNumber,\n            bin: \"\" + binNumber,\n        });\n    };\n\n    handleHexChange = (e) => {\n        var decNumber;\n        var hexNumber;\n        var binNumber;\n\n        if (e.target.value.length === 0) {\n            decNumber = \"\";\n            hexNumber = \"\";\n            binNumber = \"\";\n        } else {\n            decNumber = parseInt(e.target.value, 16);\n            hexNumber = e.target.value.toUpperCase();\n            binNumber = (decNumber >>> 0).toString(2);\n        }\n\n        this.setState({\n            dec: \"\" + decNumber,\n            hex: \"\" + hexNumber,\n            bin: \"\" + binNumber,\n        });\n    };\n\n    handleBinChange = (e) => {\n        if (isNaN(e.target.value)) {\n            return;\n        }\n\n        var decNumber;\n        var hexNumber;\n        var binNumber;\n\n        if (e.target.value.length === 0) {\n            decNumber = \"\";\n            hexNumber = \"\";\n            binNumber = \"\";\n        } else {\n            decNumber = parseInt(e.target.value, 2);\n            hexNumber = decNumber.toString(16).toUpperCase();\n            binNumber = e.target.value;\n        }\n\n        this.setState({\n            dec: \"\" + decNumber,\n            hex: \"\" + hexNumber,\n            bin: \"\" + binNumber,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"registers-container\">\n                <h1>Registers</h1>\n                <table className=\"primary-registers\">\n                    <tbody>\n                        <tr>\n                            <td>Accumulator</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.A}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>B Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.B}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>C Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.C}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>D Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.D}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>E Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.E}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>H Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.H}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>L Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.L}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Memory</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.M}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table className=\"flag-registers\">\n                    <tbody>\n                        <tr>\n                            <td className=\"register-value\">S</td>\n                            <td className=\"register-value\">Z</td>\n                            <td className=\"register-value\">AC</td>\n                            <td className=\"register-value\">P</td>\n                            <td className=\"register-value\">CY</td>\n                        </tr>\n                        <tr>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.S}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.Z}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.AC}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.P}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.CY}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table className=\"number-converter\">\n                    <tbody>\n                        <tr>\n                            <td className=\"register-value\">Dec</td>\n                            <td className=\"register-value\">Hex</td>\n                            <td className=\"register-value\">Bin</td>\n                        </tr>\n                        <tr>\n                            <td className=\"register-value\">\n                                <input\n                                    type=\"text\"\n                                    value={this.state.dec}\n                                    onChange={this.handleDecChange}\n                                />\n                            </td>\n                            <td className=\"register-value\">\n                                <input\n                                    type=\"text\"\n                                    value={this.state.hex}\n                                    onChange={this.handleHexChange}\n                                />\n                            </td>\n                            <td className=\"register-value\">\n                                <input\n                                    type=\"text\"\n                                    value={this.state.bin}\n                                    onChange={this.handleBinChange}\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        primaryRegisters: state.registerReducer.primaryRegisters,\n        flagRegisters: state.registerReducer.flagRegisters,\n    };\n};\n\nexport default connect(mapStateToProps)(Registers);\n","import React, { Component } from \"react\";\nimport \"./Styles/BodyStyles.scss\";\n\nexport class Editor extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"editor-container\">\n            </div>\n        );\n    }\n}\n\nexport default Editor;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../Styles/BodyStyles.scss\";\n\nexport class EntireMemoryView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: 0,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        var vis = Math.floor(nextProps.jumpTo / 16) * 16;\n        this.setState({ visible: vis });\n    }\n\n    onRightNav = () => {\n        this.setState({\n            visible: this.state.visible + 16,\n        });\n    };\n\n    onLeftNav = () => {\n        this.setState({\n            visible: this.state.visible - 16,\n        });\n    };\n\n    render() {\n        var starting = this.state.visible;\n        var ending = starting + 15;\n\n        return (\n            <div className=\"entire-memory-view\">\n                <div className=\"grid\">\n                    <div className=\"grid-element\"></div>\n                    <div className=\"grid-element grid-bold\">0</div>\n                    <div className=\"grid-element grid-bold\">1</div>\n                    <div className=\"grid-element grid-bold\">2</div>\n                    <div className=\"grid-element grid-bold\">3</div>\n                    <div className=\"grid-element grid-bold\">4</div>\n                    <div className=\"grid-element grid-bold\">5</div>\n                    <div className=\"grid-element grid-bold\">6</div>\n                    <div className=\"grid-element grid-bold\">7</div>\n                    <div className=\"grid-element grid-bold\">8</div>\n                    <div className=\"grid-element grid-bold\">9</div>\n                    <div className=\"grid-element grid-bold\">A</div>\n                    <div className=\"grid-element grid-bold\">B</div>\n                    <div className=\"grid-element grid-bold\">C</div>\n                    <div className=\"grid-element grid-bold\">D</div>\n                    <div className=\"grid-element grid-bold\">E</div>\n                    <div className=\"grid-element grid-bold\">F</div>\n\n                    {this.props.memory\n                        .slice(starting, ending + 1)\n                        .map((row, index) => {\n                            return (\n                                <React.Fragment>\n                                    <div className=\"grid-element grid-bold\">\n                                        {(\n                                            \"000\" +\n                                            (this.state.visible + index)\n                                                .toString(16)\n                                                .toUpperCase()\n                                        ).slice(-3) + \"0\"}\n                                    </div>\n                                    {row.map((value) => {\n                                        return (\n                                            <div className=\"grid-element\">\n                                                {(\"0\" + value).slice(-2)}\n                                            </div>\n                                        );\n                                    })}\n                                </React.Fragment>\n                            );\n                        })}\n                </div>\n\n                <div className=\"navigation\">\n                    {this.state.visible > 0 ? (\n                        <i\n                            className=\"fas fa-chevron-left\"\n                            onClick={this.onLeftNav}\n                        ></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-left disabled\"></i>\n                    )}\n\n                    <div className=\"current\">\n                        {(\"0000\" + starting.toString(16))\n                            .slice(-3)\n                            .toUpperCase() + \"0\"}{\" \"}\n                        -&nbsp;\n                        {(\"0000\" + ending.toString(16))\n                            .slice(-3)\n                            .toUpperCase() + \"F\"}\n                    </div>\n\n                    {this.state.visible !== 4080 ? (\n                        <i\n                            className=\"fas fa-chevron-right\"\n                            onClick={this.onRightNav}\n                        ></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-right disabled\"></i>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        memory: state.memoryReducer.memory,\n        visible: ownProps.jumpTo,\n    };\n};\n\nexport default connect(mapStateToProps)(EntireMemoryView);\n","import React from \"react\";\n\nfunction LoadedMemoryView() {\n    return <div className=\"loaded-memory-view\"></div>;\n}\n\nexport default LoadedMemoryView;\n","import React, { Component } from \"react\";\nimport \"./Styles/BodyStyles.scss\";\nimport EntireMemoryView from \"./MemoryViews/EntireMemoryView\";\nimport LoadedMemoryView from \"./MemoryViews/LoadedMemoryView\";\n\nexport class Memory extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            memoryView: \"entire-memory\",\n            jumpText: \"\",\n            jumpTo: 0,\n        };\n    }\n\n    onMemoryViewChange = (e) => {\n        this.setState({\n            memoryView: e.target.value,\n        });\n    };\n\n    onJumpToChange = (e) => {\n        var re = /^$|^([0-9A-F]){1,4}$/;\n        if (!re.test(e.target.value.toUpperCase())) {\n            return;\n        }\n\n        this.setState({\n            jumpText: e.target.value.toUpperCase(),\n        });\n    };\n\n    onJumpEnter = (e) => {\n        if (e.key === \"Enter\") {\n            this.setState({\n                jumpText: (\"0000\" + e.target.value).slice(-4),\n                jumpTo: parseInt(\"0000\" + e.target.value.slice(0, -1), 16),\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"memory-container\">\n                <div className=\"header\">\n                    <h1>Memory</h1>\n                    {this.state.memoryView === \"entire-memory\" ? (\n                        <input\n                            type=\"text\"\n                            placeholder=\"Jump to\"\n                            value={this.state.jumpText}\n                            onChange={this.onJumpToChange}\n                            onKeyDown={this.onJumpEnter}\n                        ></input>\n                    ) : null}\n                </div>\n\n                {this.state.memoryView === \"entire-memory\" ? (\n                    <EntireMemoryView jumpTo={this.state.jumpTo} />\n                ) : (\n                    <LoadedMemoryView />\n                )}\n\n                <div\n                    className=\"memory-views\"\n                    onChange={this.onMemoryViewChange}\n                >\n                    <div className=\"radio-item\">\n                        <input\n                            type=\"radio\"\n                            value=\"entire-memory\"\n                            name=\"memory-view\"\n                            checked={this.state.memoryView === \"entire-memory\"}\n                        />\n                        <label>Entire Memory</label>\n                    </div>\n                    <div className=\"radio-item\">\n                        <input\n                            type=\"radio\"\n                            value=\"loaded-memory\"\n                            name=\"memory-view\"\n                            checked={this.state.memoryView === \"loaded-memory\"}\n                        />\n                        <label>Loaded Memory</label>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Memory;\n","import React, { Component } from \"react\";\nimport \"./Styles/BodyStyles.scss\";\nimport Registers from \"./Registers\";\nimport Editor from \"./Editor\";\nimport Memory from \"./Memory\";\n\nexport class Body extends Component {\n    render() {\n        return (\n            <div className=\"body\">\n                <Registers />\n                <Editor />\n                <Memory />\n            </div>\n        );\n    }\n}\n\nexport default Body;\n","import \"./App.css\";\nimport \"./Components/Navbar\";\nimport Navbar from \"./Components/Navbar\";\nimport Body from \"./Components/Body\";\n\nfunction App() {\n    return (\n        <div className=\"global-container\">\n            <Navbar />\n            <Body />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}