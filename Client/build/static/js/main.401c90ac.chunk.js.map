{"version":3,"sources":["Redux/Actions/types.js","Redux/Reducers/navbarReducer.js","Redux/Reducers/registerReducer.js","Redux/Reducers/memoryReducer.js","Redux/Reducers/editorReducer.js","Redux/Reducers/bodyReducer.js","Redux/Reducers/assembledReducer.js","Redux/Reducers/stackReducer.js","Redux/Reducers/rootReducer.js","Redux/store.js","res/logo.png","Redux/Actions/memoryOnChangeAction.js","Redux/Actions/bodyOnChangeAction.js","Components/Processing/Resources/dataStructures.js","Components/Processing/Resources/instructions.js","Components/Processing/Resources/parse.js","Components/Processing/assembler.js","Components/Navbar.jsx","Redux/Actions/navbarOnChange.js","Components/Registers.jsx","Redux/Actions/registerOnChangeAction.js","Components/EditorConfig/language.js","Components/EditorConfig/theme.js","Components/Editor.jsx","Redux/Actions/editorOnChangeAction.js","Components/Processing/execute.js","Components/Assembled.jsx","Redux/Actions/assembledOnChangeAction.js","Components/MemoryViews/EntireMemoryView.jsx","Components/MemoryViews/LoadedMemoryView.jsx","Components/Memory.jsx","Components/Body.jsx","Components/PopupWindow.jsx","App.jsx","index.jsx"],"names":["FILEOPEN_POPUP","FILENAME_CHANGE","REGISTER_RESET","REGISTER_CHANGE","REGISTER_PC_RESET","EDITOR_CHANGE","MEMORY_INIT","MEMORY_BYTES","MEMORY_RESET","MEMORY_STEP","SWITCH_VIEW","STEP_LABEL","STEP_LABEL_RESET","STATE_STACK_CHANGE","STATE_STACK_RESET","initialState","filename","primaryRegisters","A","B","C","D","E","H","L","M","PC","flagRegisters","S","Z","AC","P","CY","memory","Array","fill","map","i","instructions","opCodes","visible","editorText","editorView","editorDisappearText","popupView","labelIndex","stateStack","combineReducers","navbarReducer","state","action","type","actionTypes","payload","registerReducer","memoryReducer","editorReducer","bodyReducer","assembledReducer","stackReducer","middleware","thunk","enhancers","applyMiddleware","store","createStore","rootReducer","memoryOnStep","vis","dispatch","bodyOnChange","getState","numBytes","opcode","Object","entries","ACI","ADI","ANI","CALL","CC","CM","CMA","CMC","CNC","CNZ","CP","CPE","CPI","CPO","CZ","DAA","DI","EI","HLT","IN","JC","JM","JMP","JNC","JNZ","JP","JPE","JPO","JZ","LDA","LHLD","NOP","ORI","OUT","PCHL","RAL","RAR","RC","RET","RIM","RLC","RM","RNC","RNZ","RP","RPE","RPO","RRC","RZ","SBI","SHLD","SIM","SPHL","STA","STC","SUI","XCHG","XRI","XTHL","forEach","key","value","errorDict","0","1","2","3","4","isHex","operand","len","length","checkInstructionError","instruction","label","isError","errorCode","mnemonic","split","instructionSize","error","console","log","parse","err","code","String","slice","errorList","labelList","getAssembledInstructions","pgm","instructionList","re","cur","test","push","getLabels","curInstruction","one","two","three","includes","getInstructions","start","parseInt","offset","curAddress","toString","toUpperCase","padStart","j","trim","getLabelMemoryLocation","byteCodes","opcodeList","getOpcodes","filter","Boolean","errorCodes","Navbar","handleProjectName","e","props","navbarOnChange","target","handleAssemblyClick","payloadLocal","JSON","stringify","replace","memoryOnInit","handleSaveClick","blob","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","click","revokeObjectURL","handleOpenClick","fileUploadPopup","handleEnter","keyCode","activeElement","blur","handleBlur","handleOnPencilClick","getElementById","select","className","src","Logo","alt","id","this","onChange","onKeyDown","onBlur","style","width","onClick","Component","connect","linearMem","concat","k","Math","floor","Registers","onRegisterReset","registerReset","handleDecChange","decNumber","hexNumber","binNumber","setState","dec","hex","bin","handleHexChange","handleBinChange","SIM_LANG","defaultToken","ignoreCase","keywords","registers","tokenizer","root","include","cases","whitespace","SIM_THEME","base","inherit","rules","token","foreground","colors","editorOnChange","useState","large","setLarge","editorRef","useRef","handleEditor","editor","onDidChangeContent","handleContentChange","getValue","onFormat","model","options","instructionArray","formattedString","index","endsWith","range","startLineNumber","startColumn","endLineNumber","getLineCount","endColumn","text","addEventListener","innerWidth","monaco","init","then","monacoInstance","wrapper","properties","language","theme","height","fontSize","automaticLayout","scrollbar","useShadows","vertical","horizontal","verticalScrollbarSize","horizontalScrollbarSize","minimap","enabled","languages","register","setMonarchTokensProvider","registerDocumentFormattingEditProvider","provideDocumentFormattingEdits","defineTheme","onDidCreateModel","create","setValue","catch","execute","jsonInput","ret","start_index","steps","genReg","flagReg","x","instruction_def","getMemoryIndex","address","setFlagReg","acc","count","adc","reg","operand1","operand2","operand3","add","ana","dcr","inr","inx","lxi","byte3","byte2","tempAdd","memoryIndex","pc","prototype","s1","RegExp","Assembled","onViewChange","onStepForward","propsCopy","stepLabelForward","final","inputParams","onStepBackward","stepLabelBackward","Fragment","stateStackCopy","pastStack","pop","EntireMemoryView","onRightNav","onLeftNav","starting","ending","row","LoadedMemoryView","Memory","onMemoryViewChange","memoryView","onMemoryReset","memoryOnReset","onJumpToChange","jumpText","onJumpEnter","jumpTo","placeholder","name","checked","Body","PopupWindow","dropRef","React","createRef","componentDidMount","div","current","dragCounter","handleDragIn","handleDragOut","handleDrag","handleDrop","preventDefault","stopPropagation","dataTransfer","items","dragging","fileReader","FileReader","editorOnUpload","result","files","alert","readAsText","removeEventListener","ref","App","ReactDOM","render"],"mappings":"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,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd,UAAW,CACPC,OAAQ,KACRD,SAAU,KAGd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M1C,uBAAOwM,UAAU,mBAAjB,SACI,kCACI,+BACI,oBAAIA,UAAU,gCAAd,iBAGA,oBAAIA,UAAU,gCAAd,iBAGA,oBAAIA,UAAU,gCAAd,oBAIJ,+BACI,oBAAIA,UAAU,iBAAd,SACI,uBACIrL,KAAK,OACLsF,MAAOoG,KAAK5L,MAAMkN,IAClBrB,SAAUD,KAAKiB,oBAGvB,oBAAItB,UAAU,iBAAd,SACI,uBACIrL,KAAK,OACLsF,MAAOoG,KAAK5L,MAAMmN,IAClBtB,SAAUD,KAAKyB,oBAGvB,oBAAI9B,UAAU,iBAAd,SACI,uBACIrL,KAAK,OACLsF,MAAOoG,KAAK5L,MAAMoN,IAClBvB,SAAUD,KAAK0B,mCAtOnD,GAA+BnB,cAwPhBC,gBAPS,SAACpM,GACrB,MAAO,CACHhC,iBAAkBgC,EAAMK,gBAAgBrC,iBACxCU,cAAesB,EAAMK,gBAAgB3B,iBAIL,CAAEkO,cC3Pb,kBAAM,SAACxL,GAChCA,EAAS,CACLlB,KAAMC,EACNC,QAAS,QDwPFgM,CAA4CM,I,SEzB5Ca,GAjOS,CACpBC,aAAc,UACdC,WAAY,OAEZC,SAAU,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,OACA,QAGJC,UAAW,CACP,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,IACA,IACA,KACA,MAGJtH,MAAO,eAEPuH,UAAW,CACPC,KAAM,CACF,CAAEC,QAAS,eAGX,CACI,sBACA,CACIC,MAAO,CACH,YAAa,UACb,aAAc,YACd,WAAY,aAMxB,CAAC,SAAU,UAGfC,WAAY,CACR,CAAC,aAAc,SACf,CAAC,OAAQ,cC3MNC,GAjBU,CACrBC,KAAM,UACNC,SAAS,EACTC,MAAO,CACH,CAAEC,MAAO,UAAWC,WAAY,UAChC,CAAED,MAAO,UAAWC,WAAY,UAChC,CAAED,MAAO,YAAaC,WAAY,UAClC,CAAED,MAAO,UAAWC,WAAY,UAChC,CAAED,MAAO,QAASC,WAAY,WAElCC,OAAQ,CACJ,oBAAqB,UACrB,0BAA2B,UAC3B,6BAA8B,YCqIvBnC,gBAPS,SAACpM,GACrB,MAAO,CACHP,WAAYO,EAAMQ,YAAYf,WAC9BC,oBAAqBM,EAAMQ,YAAYd,uBAIP,CACpC8O,eCpJ0B,SAAChP,GAAD,OAAgB,SAAC4B,GAC3CA,EAAS,CACLlB,KAAMC,EACNC,QAASZ,MDkJb6B,gBAFW+K,EA1IO,SAAC9C,GAAW,IAAD,EACHmF,mBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,KAEzBC,EAAYC,mBAMhB,SAASC,EAAaC,IAClBH,EAAYG,GACFC,mBAAmBC,GAUjC,SAASA,EAAoB5F,GACzBC,EAAMkF,eAAeI,EAAUM,YASnC,SAASC,EAASC,EAAOC,EAAShB,GAC9B,IAAIiB,EAAmBjI,GACnB+H,EACKF,WACArF,QAAQ,cAAe,KACvBrB,cACA/B,MAAM,MAEfG,QAAQC,IAAIyI,GAEZ,IAAIC,EAAkB,GAYtB,OAXAD,EAAiBjQ,aAAaF,KAAI,SAACqG,EAAOgK,GAMtC,OALIhK,EAAMiK,SAAS,KACfF,GAAmB/J,EAAQ,KAE3B+J,GAAmB,OAAS/J,EAAQ,KAEjCA,KAGXoB,QAAQC,IAAI0I,GAEL,CACH,CACIG,MAAO,CACHC,gBAAiB,EACjBC,YAAa,EACbC,cAAeT,EAAMU,eAAiB,EACtCC,UAAW,GAEfC,KAAMT,IA4DlB,OApHArF,OAAO+F,iBAAiB,UAUxB,WACQ/F,OAAOgG,YAAc,KAAMvB,EAAS,GACnCA,EAAS,MAwDlBwB,UACKC,OACAC,MAAK,SAACC,GACH,IAAMC,EAAUhG,SAASc,eAAe,gBAClCmF,EAAa,CACfhL,MAAO,GACPiL,SAAU,WACVC,MAAO,WACPC,OAAQ,OACRC,SAAoB,IAAVlC,EAAc,OAAS,OACjCmC,iBAAiB,EACjBC,UAAW,CACPC,YAAY,EACZC,SAAU,OACVC,WAAY,OACZC,sBAAuB,EACvBC,wBAAyB,GAE7BC,QAAS,CACLC,SAAS,IAIjBf,EAAegB,UAAUC,SAAS,CAAE5F,GAAI,aACxC2E,EAAegB,UAAUE,yBACrB,WACAjE,IAEJ+C,EAAegB,UAAUG,uCACrB,WACA,CACIC,+BAAgCvC,IAGxCmB,EAAevB,OAAO4C,YAAY,WAAY1D,IAC9CqC,EAAevB,OAAO6C,iBAAiB9C,GACvCwB,EAAevB,OAAO8C,OAAOtB,EAASC,MAEzCH,MAAK,WACFzB,EAAUkD,SAASxI,EAAM5J,wBAE5BqS,OAAM,SAACpL,GAAD,OACHC,QAAQD,MACJ,sDACAA,MAKR,sBAAKgF,GAAG,mBAAmBJ,UAAU,mBAArC,UACI,sBAAKA,UAAU,SAAf,UACI,wCACA,mBAAGA,UAAU,eAAeW,QAnGxC,SAAsB7C,GAClBC,EAAMjI,cAAciI,EAAM7J,kBAoGtB,qBAAKkM,GAAG,eAAeJ,UAAU,uBEzG7C,SAASyG,GAAQC,GAkEb,IARA,IAOIC,EAPA7S,EAAe4S,EAAS,aACxBE,EAAcF,EAAU,qBACxBG,EAAQH,EAAS,MACjBI,EAASJ,EAAU,qBACnBK,EAAUL,EAAU,kBACpBjT,EAASiT,EAAS,OAGbM,EAAI,EAAGA,EAAIH,EAAOG,IAQvBF,GANAH,EAAMM,GACFnT,EAAa8S,EAAcI,GAC3BF,EACAC,EACAtT,IAES,GACbsT,EAAUJ,EAAI,GACdlT,EAASkT,EAAI,GAMPO,GAAe,KAGzB,MAAO,CACHzU,iBAAkBqU,EAClB3T,cAAe4T,EACftT,OAAQA,GAIhB,SAASyT,GAAeC,GAIpB,MAAO,CAHCtK,SAASsK,EAAU,IACnBtK,SAASsK,EAAU,KAK/B,SAASC,GAAWC,EAAKN,GACrB,IAAIlF,EAAMwF,EA2BV,MAxBe,OAFfxF,GAAOA,IAAQ,GAAG7E,SAAS,GAAGE,SAAS,EAAG,KAAKvB,OAAO,IAE9C,GACJoL,EAAO,EAAQ,IAEfA,EAAO,EAAQ,IAGI,IAAnBlF,EAAIyF,MAAM,KACVP,EAAO,EAAQ,IAEfA,EAAO,EAAQ,IAGflF,EAAIyF,MAAM,KAAO,IAAM,EACvBP,EAAO,EAAQ,IAEfA,EAAO,EAAQ,IAG2C,OAAzDM,IAAQ,GAAGrK,SAAS,GAAGE,SAAS,EAAG,KAAKvB,OAAO,GAAG,GACnDoL,EAAO,GAAS,IAEhBA,EAAO,GAAS,IAGbA,EAGX,SAASQ,GAAIC,EAAKV,EAAQC,GACtB,IAAIU,EAAWX,EAAM,EACjBY,EAAWZ,EAAOU,GAClBG,EAAWZ,EAAO,GAYtB,OAVAU,EAAW5K,SAAS4K,EAAU,IAK9BV,EAAUK,GADVK,IAHAC,EAAW7K,SAAS6K,EAAU,MAC9BC,EAAW9K,SAAS8K,EAAU,KAGCZ,GAE/BU,EAAWA,EAASzK,SAAS,IAAIC,cAAcC,SAAS,EAAG,KAAKvB,OAAO,GACvEmL,EAAM,EAAQW,EAEP,CAACX,EAAQC,GAGpB,SAASa,GAAIJ,EAAKV,EAAQC,GACtB,IAEIW,EAFAD,EAAWX,EAAM,EAcrB,OAbAW,EAAW5K,SAAS4K,EAAU,IAG9BC,EAAWZ,EAAOU,GAKlBT,EAAUK,GAFVK,GAFAC,EAAW7K,SAAS6K,EAAU,IAICX,GAE/BU,EAAWA,EAASzK,SAAS,IAAIC,cAAcC,SAAS,EAAG,KAAKvB,OAAO,GACvEmL,EAAM,EAAQW,EAEP,CAACX,EAAQC,GAGpB,SAASc,GAAIL,EAAKV,EAAQC,GACtB,IAAIU,EAAWX,EAAM,EACjBY,EAAWZ,EAAOU,GAWtB,OATAC,EAAW5K,SAAS4K,EAAU,IAI9BV,EAAUK,GADVK,GAFAC,EAAW7K,SAAS6K,EAAU,IAGCX,GAE/BU,EAAWA,EAASzK,SAAS,IAAIC,cAAcC,SAAS,EAAG,KAAKvB,OAAO,GACvEmL,EAAM,EAAQW,EAEP,CAACX,EAAQC,GAGpB,SAASe,GAAIN,EAAKV,EAAQC,GACtB,IAAItM,EAAUqM,EAAOU,GASrB,OAPA/M,EAAUoC,SAASpC,EAAS,IAE5BsM,EAAUK,GADV3M,GAAW,EACmBsM,GAE9BtM,GADAA,EAAUA,EAAQuC,SAAS,KACTC,cAAcC,SAAS,EAAG,KAAKvB,OAAO,GACxDmL,EAAOU,GAAO/M,EAEP,CAACqM,EAAQC,GAGpB,SAASgB,GAAIP,EAAKV,EAAQC,GACtB,IAAItM,EAAUqM,EAAOU,GAUrB,OARA/M,EAAUoC,SAASpC,EAAS,KAE5BA,GAAW,GACHuC,SAAS,IACjB+J,EAAUK,GAAW3M,EAASsM,GAC9BtM,EAAUA,EAAQwC,cAAcC,SAAS,EAAG,KAAKvB,OAAO,GACxDmL,EAAOU,GAAO/M,EAEP,CAACqM,EAAQC,GAGpB,SAASiB,GAAIR,EAAKV,GACd,IAAIrM,EAEJ,OAAQ+M,GACJ,IAAK,IACD/M,EAAUqM,EAAM,EAAQA,EAAM,EAC9BrM,EAAUoC,SAASpC,EAAS,IAE5BA,KADAA,GACkBuC,SAAS,IAAIC,cAAcC,SAAS,EAAG,KACzD4J,EAAM,EAAQrM,EAAQkB,MAAM,EAAG,GAC/BmL,EAAM,EAAQrM,EAAQkB,OAAO,GAC7B,MAEJ,IAAK,IACDlB,EAAUqM,EAAM,EAAQA,EAAM,EAC9BrM,EAAUoC,SAASpC,EAAS,IAE5BA,KADAA,GACkBuC,SAAS,IAAIC,cAAcC,SAAS,EAAG,KACzD4J,EAAM,EAAQrM,EAAQkB,MAAM,EAAG,GAC/BmL,EAAM,EAAQrM,EAAQkB,OAAO,GAC7B,MAEJ,IAAK,IACDlB,EAAUqM,EAAM,EAAQA,EAAM,EAC9BrM,EAAUoC,SAASpC,EAAS,IAE5BA,KADAA,GACkBuC,SAAS,IAAIC,cAAcC,SAAS,EAAG,KACzD4J,EAAM,EAAQrM,EAAQkB,MAAM,EAAG,GAC/BmL,EAAM,EAAQrM,EAAQkB,OAAO,GAC7B,MAEJ,IAAK,KACDlB,EAAUqM,EAAM,GAChBrM,EAAUoC,SAASpC,EAAS,IAE5BA,KADAA,GAEKuC,SAAS,IACTC,cACAC,SAAS,EAAG,KACZvB,OAAO,GACZmL,EAAM,GAASrM,EACf,MAEJ,QACIY,QAAQC,IAAI,OAGpB,OAAOwL,EAGX,SAASmB,GAAIT,EAAKU,EAAOC,EAAOrB,GAC5B,OAAQU,GACJ,IAAK,IACDV,EAAM,EAAQqB,EACdrB,EAAM,EAAQoB,EACd,MAEJ,IAAK,IACDpB,EAAM,EAAQqB,EACdrB,EAAM,EAAQoB,EACd,MAEJ,IAAK,IACDpB,EAAM,EAAQqB,EACdrB,EAAM,EAAQoB,EACd,MAEJ,IAAK,KACDpB,EAAM,GAASqB,EAAQD,EACvB,MAEJ,QACI7M,QAAQC,IAAI,YAEpB,OAAOwL,EAGX,SAASG,GAAgBpM,EAAaiM,EAAQC,EAAStT,GACnD,IAAI2U,EACAC,EAGAb,EACAU,EACAC,EACAnS,EAEAC,EAAS4E,EAAY,GAEzB,OAAQ5E,GAIJ,IAAK,KAEDkS,EAAQtN,EAAY,GACpBsN,EAAQtL,SAASsL,EAAO,IACxBrB,EAAM,EACFjK,SAASiK,EAAM,GAASqB,EAAQtL,SAASkK,EAAO,IACpDA,EAAUK,GAAWN,EAAM,EAAOC,GAClCD,EAAM,EAAQA,EAAM,EACf9J,SAAS,IACTC,cACAC,SAAS,EAAG,KACZvB,OAAO,GAEZ3F,EAAW,EAEX,MAKJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMD,GAAI,IAAKT,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAKJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMI,GAAI,IAAKd,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAKJ,IAAK,KACDmS,EAAQtN,EAAY,GACpBsN,EAAQtL,SAASsL,EAAO,IACxBrB,EAAM,EAAQjK,SAASiK,EAAM,EAAO,IACpCA,EAAM,GAASqB,EACfpB,EAAUK,GAAWN,EAAM,EAAOC,GAClCD,EAAM,EAAQA,EAAM,EACf9J,SAAS,IACTC,cACAC,SAAS,EAAG,KACZvB,OAAO,GAEZ3F,EAAW,EACX,MAKJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMK,GAAI,IAAKf,EAAQC,IACV,GACbA,EAAUS,EAAI,GACdxR,EAAW,EACX,MAKJ,IAAK,KAEDmS,EAAQtN,EAAY,GACpBsN,EAAQtL,SAASsL,EAAO,IACxBrB,EAAM,EAAQjK,SAASiK,EAAM,EAAO,IACpCA,EAAM,EAAQA,EAAM,EAAQqB,EAC5BpB,EAAUK,GAAWN,EAAM,EAAOC,GAClCD,EAAM,EAAQA,EAAM,EACf9J,SAAS,IACTC,cACAC,SAAS,EAAG,KACZvB,OAAO,GAEZ3F,EAAW,EACX,MAKJ,IAAK,KAQL,IAAK,KAQL,IAAK,KAGD,MAKJ,IAAK,KAED8Q,EAAM,EAAQjK,SAASiK,EAAM,EAAQ,EAAG,IACxCA,EAAM,GAASA,EAAM,IAAU,GAAG9J,SAAS,GAAGrB,OAAO,GACrDmL,EAAM,EAAQjK,SAASiK,EAAM,EAAO,GACpCA,EAAM,EAAQA,EAAM,EACf9J,SAAS,IACTC,cACAC,SAAS,EAAG,KACZvB,OAAO,GAEZ3F,EAAW,EACX,MAKJ,IAAK,KAEqB,MAAlB+Q,EAAO,GACPA,EAAO,GAAS,IACS,MAAlBA,EAAO,KACdA,EAAO,GAAS,KAEpB,MASJ,IAAK,KAGDD,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMM,GAAI,IAAKhB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAKJ,IAAK,KAGDA,EAAW,EAEX,MAKJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAEJ,IAAK,KAGD8Q,GADAU,EAAMO,GAAI,IAAKjB,EAAQC,IACV,GACbA,EAAUS,EAAI,GAEdxR,EAAW,EAEX,MAKJ,IAAK,KAED8Q,EAASkB,GAAI,IAAKlB,GAElB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAASkB,GAAI,IAAKlB,GAElB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAASkB,GAAI,IAAKlB,GAElB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAASkB,GAAI,KAAMlB,GAEnB9Q,EAAW,EAEX,MAKJ,IAAK,KAKD,GAHAkS,EAAQrN,EAAY,GACpBsN,EAAQtN,EAAY,GAEC,MAAjBkM,EAAO,EACPD,EAAM,GAASqB,EAAQD,MACpB,CACH,IAAII,EAAKxB,EAAM,GAEfwB,GADAA,EAAKzL,SAASyL,EAAI,IAAM,GAChBtL,SAAS,IAAIC,cAAcC,SAAS,EAAG,KAC/C4J,EAAM,GAASwB,EAGnBtS,EAAW,EAEX,MAKJ,IAAK,KAMD8Q,EAASmB,GAJTT,EAAM,IACNU,EAAQrN,EAAY,GACpBsN,EAAQtN,EAAY,GAEYiM,GAEhC9Q,EAAW,EAEX,MAEJ,IAAK,KAMD8Q,EAASmB,GAJTT,EAAM,IACNU,EAAQrN,EAAY,GACpBsN,EAAQtN,EAAY,GAEYiM,GAEhC9Q,EAAW,EAEX,MAEJ,IAAK,KAMD8Q,EAASmB,GAJTT,EAAM,IACNU,EAAQrN,EAAY,GACpBsN,EAAQtN,EAAY,GAEYiM,GAEhC9Q,EAAW,EAEX,MAEJ,IAAK,KAMD8Q,EAASmB,GAJTT,EAAM,KACNU,EAAQrN,EAAY,GACpBsN,EAAQtN,EAAY,GAEYiM,GAEhC9Q,EAAW,EAEX,MAKJ,IAAK,KAGDA,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAGDA,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAGDA,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAGDA,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAGDA,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAGDA,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,EAAM,EAEpB9Q,EAAW,EAEX,MAEJ,IAAK,KAED8Q,EAAM,EAAQA,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","file":"static/js/main.401c90ac.chunk.js","sourcesContent":["export const FILEOPEN_POPUP = \"FILEOPEN_POPUP\"; // When file name changes\n\nexport const FILENAME_CHANGE = \"FILENAME_CHANGE\"; // When file name changes\n\nexport const REGISTER_RESET = \"REGISTER_TEST\"; // When register are reset\nexport const REGISTER_CHANGE = \"REGISTER_CHANGE\"; // When register values are updated\nexport const REGISTER_PC_RESET = \"REGISTER_PC_RESET\"; // When register values are updated\n\nexport const EDITOR_CHANGE = \"EDITOR_CHANGE\"; // When value of editor changes\n\nexport const MEMORY_INIT = \"MEMORY_INIT\"; // When memory is initialised\nexport const MEMORY_BYTES = \"MEMORY_BYTES\"; // When memory bytes are changed\nexport const MEMORY_RESET = \"MEMORY_RESET\"; // When memory is reset\nexport const MEMORY_STEP = \"MEMORY_STEP\"; // When memory is reset\n\nexport const SWITCH_VIEW = \"SWITCH_VIEW\"; // When view switched from editor and back\nexport const STEP_LABEL = \"STEP_LABEL\"; // When view switched from editor and back\nexport const STEP_LABEL_RESET = \"STEP_LABEL_RESET\"; // When view switched from editor and back\n\nexport const STATE_STACK_CHANGE = \"STATE_STACK_CHANGE\"; // When stack is updated\nexport const STATE_STACK_RESET = \"STATE_STACK_RESET\"; // When stack is updated\n","import * as actionTypes from \"../Actions/types\";\n\n// File name initialised to \"Untitled\"\nconst initialState = {\n    filename: \"Untitled\",\n};\n\nexport default function navbar(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.FILENAME_CHANGE:\n            return {\n                ...state,\n                filename: action.payload,\n            };\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../Actions/types\";\n\n// All registers have value 0\nconst initialState = {\n    primaryRegisters: {\n        A: \"00\",\n        B: \"00\",\n        C: \"00\",\n        D: \"00\",\n        E: \"00\",\n        H: \"00\",\n        L: \"00\",\n        M: \"00\",\n        PC: \"0000\",\n    },\n\n    flagRegisters: {\n        S: \"0\",\n        Z: \"0\",\n        AC: \"0\",\n        P: \"0\",\n        CY: \"0\",\n    },\n};\n\nexport default function registers(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.REGISTER_CHANGE:\n            return {\n                ...state,\n                primaryRegisters: action.payload.primaryRegisters,\n                flagRegisters: action.payload.flagRegisters,\n            };\n\n        case actionTypes.REGISTER_RESET:\n            return {\n                primaryRegisters: {\n                    A: \"00\",\n                    B: \"00\",\n                    C: \"00\",\n                    D: \"00\",\n                    E: \"00\",\n                    H: \"00\",\n                    L: \"00\",\n                    M: \"00\",\n                    PC: \"0000\",\n                },\n                flagRegisters: {\n                    S: \"0\",\n                    Z: \"0\",\n                    AC: \"0\",\n                    P: \"0\",\n                    CY: \"0\",\n                },\n            };\n\n        case actionTypes.REGISTER_PC_RESET:\n            return {\n                ...state,\n                primaryRegisters: {\n                    ...state.primaryRegisters,\n                    PC: \"0000\",\n                },\n            };\n        default:\n            return state;\n    }\n}\n","// Initial value of the memory.\n// The 65535 memory addresses from 0x0000 to 0xFFFF\n// is represented as a 4096 x 16 matrix\n// all initialised to zero\nimport * as actionTypes from \"../Actions/types\";\n\nconst initialState = {\n    memory: new Array(4096).fill(0).map((i) => {\n        return new Array(16).fill(0);\n    }),\n    instructions: [],\n    opCodes: [],\n    visible: 0,\n};\n\nexport default function memory(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.MEMORY_INIT:\n            return {\n                ...state,\n                memory: action.payload.memory,\n                instructions: action.payload.instructions,\n            };\n        case actionTypes.MEMORY_BYTES:\n            return {\n                ...state,\n                opCodes: action.payload,\n            };\n        case actionTypes.MEMORY_RESET:\n            return {\n                ...state,\n                memory: action.payload,\n            };\n        case actionTypes.MEMORY_STEP:\n            return {\n                ...state,\n                visible: action.payload,\n            };\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../Actions/types\";\n\n// Initial value of the text of the editor\nconst initialState = {\n    editorText: \"\",\n};\n\nexport default function editor(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.EDITOR_CHANGE:\n            return {\n                ...state,\n                editorText: action.payload,\n            };\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../Actions/types\";\n\n// Editor View is set to true\nconst initialState = {\n    editorView: true,\n    editorDisappearText: \"\",\n    popupView: false,\n};\n\nexport default function body(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.SWITCH_VIEW:\n            return {\n                ...state,\n                editorView: action.payload.editorView,\n                editorDisappearText: action.payload.editorDisappearText,\n            };\n        case actionTypes.FILEOPEN_POPUP:\n            return {\n                ...state,\n                popupView: action.payload.popupView,\n                editorDisappearText: action.payload.editorText,\n            };\n\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../Actions/types\";\n\n// Initial value of the text of the editor\nconst initialState = {\n    labelIndex: -1,\n};\n\nexport default function assembled(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.STEP_LABEL:\n            return {\n                ...state,\n                labelIndex: action.payload,\n            };\n        case actionTypes.STEP_LABEL_RESET:\n            return {\n                ...state,\n                labelIndex: -1,\n            };\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../Actions/types\";\n\n// Intially stack is empty\nconst initialState = {\n    stateStack: [],\n};\n\nexport default function stack(state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.STATE_STACK_CHANGE:\n            return {\n                ...state,\n                stateStack: action.payload,\n            };\n        case actionTypes.STATE_STACK_RESET:\n            return {\n                ...state,\n                stateStack: [],\n            };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\nimport navbarReducer from \"./navbarReducer\";\nimport registerReducer from \"./registerReducer\";\nimport memoryReducer from \"./memoryReducer\";\nimport editorReducer from \"./editorReducer\";\nimport bodyReducer from \"./bodyReducer\";\nimport assembledReducer from \"./assembledReducer\";\nimport stackReducer from \"./stackReducer\";\n\nexport default combineReducers({\n    navbarReducer,\n    registerReducer,\n    memoryReducer,\n    editorReducer,\n    bodyReducer,\n    assembledReducer,\n    stackReducer,\n});\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./Reducers/rootReducer\";\n\nconst middleware = [thunk];\n\nconst initialState = {};\n\nconst enhancers =\n    process.env.REACT_APP_PRODUCTION === \"production\"\n        ? applyMiddleware(...middleware)\n        : composeWithDevTools(applyMiddleware(...middleware));\n\nvar store = createStore(rootReducer, initialState, enhancers);\n\nexport default store;\n","export default __webpack_public_path__ + \"static/media/logo.1b285e8d.png\";","import * as actionTypes from \"./types\";\n\n// payload = {\n//     byteCodes : [\n//         [byteCodes of line 1]\n//         [byteCodes of line 2]\n//         ...\n//     ]\n//     instructions: [\n//         \"line 1\"\n//         \"line 2\"\n//         ...\n//     ]\n// }\n\nexport const memoryOnInit = (payload) => (dispatch, getState) => {\n    var linearMem = [];\n    var memory = [...getState().memoryReducer.memory];\n\n    for (let i = 0; i < payload.byteCodes.length; i++) {\n        linearMem = linearMem.concat(payload.byteCodes[i]);\n    }\n\n    var j = 0;\n    var k = 0;\n\n    for (let i = 0; i < linearMem.length; i++) {\n        k = i % 16;\n        j = Math.floor(i / 16);\n        memory[j][k] = linearMem[i];\n    }\n\n    dispatch({\n        type: actionTypes.MEMORY_INIT,\n        payload: {\n            memory: memory,\n            instructions: payload.instructions,\n        },\n    });\n\n    dispatch({\n        type: actionTypes.MEMORY_BYTES,\n        payload: payload.byteCodes,\n    });\n\n    dispatch({\n        type: actionTypes.STEP_LABEL_RESET,\n        payload: \"\",\n    });\n\n    dispatch({\n        type: actionTypes.REGISTER_PC_RESET,\n        payload: \"\",\n    });\n\n    if (getState().bodyReducer.editorView) {\n        dispatch({\n            type: actionTypes.SWITCH_VIEW,\n            payload: {\n                editorView: !getState().bodyReducer.editorView,\n                editorDisappearText: getState().editorReducer.editorText,\n            },\n        });\n    }\n};\n\nexport const memoryOnReset = () => (dispatch) => {\n    var memory = new Array(4096).fill(0).map((i) => {\n        return new Array(16).fill(0);\n    });\n\n    dispatch({\n        type: actionTypes.MEMORY_RESET,\n        payload: memory,\n    });\n};\n\nexport const memoryOnStep = (vis) => (dispatch) => {\n    dispatch({\n        type: actionTypes.MEMORY_STEP,\n        payload: vis,\n    });\n};\n","import * as actionTypes from \"./types\";\n\nexport const bodyOnChange = () => (dispatch, getState) => {\n    dispatch({\n        type: actionTypes.SWITCH_VIEW,\n        payload: {\n            editorView: !getState().bodyReducer.editorView,\n            editorDisappearText: getState().editorReducer.editorText,\n        },\n    });\n};\n\nexport const fileUploadPopup = () => (dispatch, getState) => {\n    dispatch({\n        type: actionTypes.FILEOPEN_POPUP,\n        payload: {\n            popupView: !getState().bodyReducer.popupView,\n            editorText: getState().editorReducer.editorText,\n        },\n    });\n};\n","import { instructionSet } from \"./instructions\";\n\n// contains mnemonic -> number of bytes\nvar numBytes = {};\n\n// contains mnemonic -> opcode\nvar opcode = {};\n\nObject.entries(instructionSet.instruciontSet).forEach(([key, value]) => {\n    numBytes[key] = value.numBytes;\n    opcode[key] = value.opcode;\n});\n\nexport { numBytes, opcode };\n","export const instructionSet = {\n    instruciontSet: {\n        ACI: {\n            opcode: \"CE\",\n            numBytes: \"2\",\n        },\n\n        \"ADC A\": {\n            opcode: \"8F\",\n            numBytes: \"1\",\n        },\n\n        \"ADC B\": {\n            opcode: \"88\",\n            numBytes: \"1\",\n        },\n\n        \"ADC C\": {\n            opcode: \"89\",\n            numBytes: \"1\",\n        },\n\n        \"ADC D\": {\n            opcode: \"8A\",\n            numBytes: \"1\",\n        },\n\n        \"ADC E\": {\n            opcode: \"8B\",\n            numBytes: \"1\",\n        },\n\n        \"ADC H\": {\n            opcode: \"8C\",\n            numBytes: \"1\",\n        },\n\n        \"ADC L\": {\n            opcode: \"8D\",\n            numBytes: \"1\",\n        },\n\n        \"ADC M\": {\n            opcode: \"8E\",\n            numBytes: \"1\",\n        },\n\n        \"ADD A\": {\n            opcode: \"87\",\n            numBytes: \"1\",\n        },\n\n        \"ADD B\": {\n            opcode: \"80\",\n            numBytes: \"1\",\n        },\n\n        \"ADD C\": {\n            opcode: \"81\",\n            numBytes: \"1\",\n        },\n\n        \"ADD D\": {\n            opcode: \"82\",\n            numBytes: \"1\",\n        },\n\n        \"ADD E\": {\n            opcode: \"83\",\n            numBytes: \"1\",\n        },\n\n        \"ADD H\": {\n            opcode: \"84\",\n            numBytes: \"1\",\n        },\n\n        \"ADD L\": {\n            opcode: \"85\",\n            numBytes: \"1\",\n        },\n\n        \"ADD M\": {\n            opcode: \"86\",\n            numBytes: \"1\",\n        },\n\n        ADI: {\n            opcode: \"C6\",\n            numBytes: \"2\",\n        },\n\n        \"ANA A\": {\n            opcode: \"A7\",\n            numBytes: \"1\",\n        },\n\n        \"ANA B\": {\n            opcode: \"A0\",\n            numBytes: \"1\",\n        },\n\n        \"ANA C\": {\n            opcode: \"A1\",\n            numBytes: \"1\",\n        },\n\n        \"ANA D\": {\n            opcode: \"A2\",\n            numBytes: \"1\",\n        },\n\n        \"ANA E\": {\n            opcode: \"A3\",\n            numBytes: \"1\",\n        },\n\n        \"ANA H\": {\n            opcode: \"A4\",\n            numBytes: \"1\",\n        },\n\n        \"ANA L\": {\n            opcode: \"A5\",\n            numBytes: \"1\",\n        },\n\n        \"ANA M\": {\n            opcode: \"A6\",\n            numBytes: \"1\",\n        },\n\n        ANI: {\n            opcode: \"E6\",\n            numBytes: \"2\",\n        },\n\n        CALL: {\n            opcode: \"CD\",\n            numBytes: \"3\",\n        },\n\n        CC: {\n            opcode: \"DC\",\n            numBytes: \"3\",\n        },\n\n        CM: {\n            opcode: \"FC\",\n            numBytes: \"3\",\n        },\n\n        CMA: {\n            opcode: \"2F\",\n            numBytes: \"1\",\n        },\n\n        CMC: {\n            opcode: \"3F\",\n            numBytes: \"1\",\n        },\n\n        \"CMP A\": {\n            opcode: \"BF\",\n            numBytes: \"1\",\n        },\n\n        \"CMP B\": {\n            opcode: \"B8\",\n            numBytes: \"1\",\n        },\n\n        \"CMP C\": {\n            opcode: \"B9\",\n            numBytes: \"1\",\n        },\n\n        \"CMP D\": {\n            opcode: \"BA\",\n            numBytes: \"1\",\n        },\n\n        \"CMP E\": {\n            opcode: \"BB\",\n            numBytes: \"1\",\n        },\n\n        \"CMP H\": {\n            opcode: \"BC\",\n            numBytes: \"1\",\n        },\n\n        \"CMP L\": {\n            opcode: \"BD\",\n            numBytes: \"1\",\n        },\n\n        \"CMP M\": {\n            opcode: \"BD\",\n            numBytes: \"1\",\n        },\n\n        CNC: {\n            opcode: \"D4\",\n            numBytes: \"3\",\n        },\n\n        CNZ: {\n            opcode: \"C4\",\n            numBytes: \"3\",\n        },\n\n        CP: {\n            opcode: \"F4\",\n            numBytes: \"3\",\n        },\n\n        CPE: {\n            opcode: \"EC\",\n            numBytes: \"3\",\n        },\n\n        CPI: {\n            opcode: \"FE\",\n            numBytes: \"2\",\n        },\n\n        CPO: {\n            opcode: \"E4\",\n            numBytes: \"3\",\n        },\n\n        CZ: {\n            opcode: \"CC\",\n            numBytes: \"3\",\n        },\n\n        DAA: {\n            opcode: \"27\",\n            numBytes: \"1\",\n        },\n\n        \"DAD B\": {\n            opcode: \"09\",\n            numBytes: \"1\",\n        },\n\n        \"DAD D\": {\n            opcode: \"19\",\n            numBytes: \"1\",\n        },\n\n        \"DAD H\": {\n            opcode: \"29\",\n            numBytes: \"1\",\n        },\n\n        \"DAD SP\": {\n            opcode: \"39\",\n            numBytes: \"1\",\n        },\n\n        \"DCR A\": {\n            opcode: \"3D\",\n            numBytes: \"1\",\n        },\n\n        \"DCR B\": {\n            opcode: \"05\",\n            numBytes: \"1\",\n        },\n\n        \"DCR C\": {\n            opcode: \"0D\",\n            numBytes: \"1\",\n        },\n\n        \"DCR D\": {\n            opcode: \"15\",\n            numBytes: \"1\",\n        },\n\n        \"DCR E\": {\n            opcode: \"1D\",\n            numBytes: \"1\",\n        },\n\n        \"DCR H\": {\n            opcode: \"25\",\n            numBytes: \"1\",\n        },\n\n        \"DCR L\": {\n            opcode: \"2D\",\n            numBytes: \"1\",\n        },\n\n        \"DCR M\": {\n            opcode: \"35\",\n            numBytes: \"1\",\n        },\n\n        \"DCX B\": {\n            opcode: \"0B\",\n            numBytes: \"1\",\n        },\n\n        \"DCX D\": {\n            opcode: \"1B\",\n            numBytes: \"1\",\n        },\n\n        \"DCX H\": {\n            opcode: \"2B\",\n            numBytes: \"1\",\n        },\n\n        \"DCX SP\": {\n            opcode: \"3B\",\n            numBytes: \"1\",\n        },\n\n        DI: {\n            opcode: \"F3\",\n            numBytes: \"1\",\n        },\n\n        EI: {\n            opcode: \"FB\",\n            numBytes: \"1\",\n        },\n\n        HLT: {\n            opcode: \"76\",\n            numBytes: \"1\",\n        },\n\n        IN: {\n            opcode: \"DB\",\n            numBytes: \"2\",\n        },\n\n        \"INR A\": {\n            opcode: \"3C\",\n            numBytes: \"1\",\n        },\n\n        \"INR B\": {\n            opcode: \"04\",\n            numBytes: \"1\",\n        },\n\n        \"INR C\": {\n            opcode: \"0C\",\n            numBytes: \"1\",\n        },\n\n        \"INR D\": {\n            opcode: \"14\",\n            numBytes: \"1\",\n        },\n\n        \"INR E\": {\n            opcode: \"1C\",\n            numBytes: \"1\",\n        },\n\n        \"INR H\": {\n            opcode: \"24\",\n            numBytes: \"1\",\n        },\n\n        \"INR L\": {\n            opcode: \"2C\",\n            numBytes: \"1\",\n        },\n\n        \"INR M\": {\n            opcode: \"34\",\n            numBytes: \"1\",\n        },\n\n        \"INX B\": {\n            opcode: \"03\",\n            numBytes: \"1\",\n        },\n\n        \"INX D\": {\n            opcode: \"13\",\n            numBytes: \"1\",\n        },\n\n        \"INX H\": {\n            opcode: \"23\",\n            numBytes: \"1\",\n        },\n\n        \"INX SP\": {\n            opcode: \"33\",\n            numBytes: \"1\",\n        },\n\n        JC: {\n            opcode: \"DA\",\n            numBytes: \"3\",\n        },\n\n        JM: {\n            opcode: \"FA\",\n            numBytes: \"3\",\n        },\n\n        JMP: {\n            opcode: \"C3\",\n            numBytes: \"3\",\n        },\n\n        JNC: {\n            opcode: \"D2\",\n            numBytes: \"3\",\n        },\n\n        JNZ: {\n            opcode: \"C2\",\n            numBytes: \"3\",\n        },\n\n        JP: {\n            opcode: \"F2\",\n            numBytes: \"3\",\n        },\n\n        JPE: {\n            opcode: \"EA\",\n            numBytes: \"3\",\n        },\n\n        JPO: {\n            opcode: \"E2\",\n            numBytes: \"3\",\n        },\n\n        JZ: {\n            opcode: \"CA\",\n            numBytes: \"3\",\n        },\n\n        LDA: {\n            opcode: \"3A\",\n            numBytes: \"3\",\n        },\n\n        \"LDAX B\": {\n            opcode: \"0A\",\n            numBytes: \"1\",\n        },\n\n        \"LDAX D\": {\n            opcode: \"1A\",\n            numBytes: \"1\",\n        },\n\n        LHLD: {\n            opcode: \"2A\",\n            numBytes: \"3\",\n        },\n\n        \"LXI B\": {\n            opcode: \"01\",\n            numBytes: \"3\",\n        },\n\n        \"LXI D\": {\n            opcode: \"11\",\n            numBytes: \"3\",\n        },\n\n        \"LXI H\": {\n            opcode: \"21\",\n            numBytes: \"3\",\n        },\n\n        \"LXI SP\": {\n            opcode: \"31\",\n            numBytes: \"3\",\n        },\n\n        \"MOV A A\": {\n            opcode: \"7F\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A B\": {\n            opcode: \"78\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A C\": {\n            opcode: \"79\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A D\": {\n            opcode: \"7A\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A E\": {\n            opcode: \"7B\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A H\": {\n            opcode: \"7C\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A L\": {\n            opcode: \"7D\",\n            numBytes: \"1\",\n        },\n\n        \"MOV A M\": {\n            opcode: \"7E\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B A\": {\n            opcode: \"47\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B B\": {\n            opcode: \"40\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B C\": {\n            opcode: \"41\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B D\": {\n            opcode: \"42\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B E\": {\n            opcode: \"43\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B H\": {\n            opcode: \"44\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B L\": {\n            opcode: \"45\",\n            numBytes: \"1\",\n        },\n\n        \"MOV B M\": {\n            opcode: \"46\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C A\": {\n            opcode: \"4F\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C B\": {\n            opcode: \"48\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C C\": {\n            opcode: \"49\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C D\": {\n            opcode: \"4A\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C E\": {\n            opcode: \"4B\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C H\": {\n            opcode: \"4C\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C L\": {\n            opcode: \"4D\",\n            numBytes: \"1\",\n        },\n\n        \"MOV C M\": {\n            opcode: \"4E\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D A\": {\n            opcode: \"57\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D B\": {\n            opcode: \"50\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D C\": {\n            opcode: \"51\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D D\": {\n            opcode: \"52\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D E\": {\n            opcode: \"53\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D H\": {\n            opcode: \"54\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D L\": {\n            opcode: \"55\",\n            numBytes: \"1\",\n        },\n\n        \"MOV D M\": {\n            opcode: \"56\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E A\": {\n            opcode: \"5F\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E B\": {\n            opcode: \"58\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E C\": {\n            opcode: \"59\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E D\": {\n            opcode: \"5A\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E E\": {\n            opcode: \"5B\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E H\": {\n            opcode: \"5C\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E L\": {\n            opcode: \"5D\",\n            numBytes: \"1\",\n        },\n\n        \"MOV E M\": {\n            opcode: \"5E\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H A\": {\n            opcode: \"67\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H B\": {\n            opcode: \"60\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H C\": {\n            opcode: \"61\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H D\": {\n            opcode: \"62\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H E\": {\n            opcode: \"63\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H H\": {\n            opcode: \"64\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H L\": {\n            opcode: \"65\",\n            numBytes: \"1\",\n        },\n\n        \"MOV H M\": {\n            opcode: \"66\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L A\": {\n            opcode: \"6F\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L B\": {\n            opcode: \"68\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L C\": {\n            opcode: \"69\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L D\": {\n            opcode: \"6A\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L E\": {\n            opcode: \"6B\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L H\": {\n            opcode: \"6C\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L L\": {\n            opcode: \"6D\",\n            numBytes: \"1\",\n        },\n\n        \"MOV L M\": {\n            opcode: \"6E\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M A\": {\n            opcode: \"77\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M B\": {\n            opcode: \"70\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M C\": {\n            opcode: \"71\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M D\": {\n            opcode: \"72\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M E\": {\n            opcode: \"73\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M H\": {\n            opcode: \"74\",\n            numBytes: \"1\",\n        },\n\n        \"MOV M L\": {\n            opcode: \"75\",\n            numBytes: \"1\",\n        },\n\n        \"MVI A\": {\n            opcode: \"3E\",\n            numBytes: \"2\",\n        },\n\n        \"MVI B\": {\n            opcode: \"06\",\n            numBytes: \"2\",\n        },\n\n        \"MVI C\": {\n            opcode: \"0E\",\n            numBytes: \"2\",\n        },\n\n        \"MVI D\": {\n            opcode: \"16\",\n            numBytes: \"2\",\n        },\n\n        \"MVI E\": {\n            opcode: \"1E\",\n            numBytes: \"2\",\n        },\n\n        \"MVI H\": {\n            opcode: \"26\",\n            numBytes: \"2\",\n        },\n\n        \"MVI L\": {\n            opcode: \"2E\",\n            numBytes: \"2\",\n        },\n\n        \"MVI M\": {\n            opcode: \"36\",\n            numBytes: \"2\",\n        },\n\n        NOP: {\n            opcode: \"00\",\n            numBytes: \"1\",\n        },\n\n        \"ORA A\": {\n            opcode: \"B7\",\n            numBytes: \"1\",\n        },\n\n        \"ORA B\": {\n            opcode: \"B0\",\n            numBytes: \"1\",\n        },\n\n        \"ORA C\": {\n            opcode: \"B1\",\n            numBytes: \"1\",\n        },\n\n        \"ORA D\": {\n            opcode: \"B2\",\n            numBytes: \"1\",\n        },\n\n        \"ORA E\": {\n            opcode: \"B3\",\n            numBytes: \"1\",\n        },\n\n        \"ORA H\": {\n            opcode: \"B4\",\n            numBytes: \"1\",\n        },\n\n        \"ORA L\": {\n            opcode: \"B5\",\n            numBytes: \"1\",\n        },\n\n        \"ORA M\": {\n            opcode: \"B6\",\n            numBytes: \"1\",\n        },\n\n        ORI: {\n            opcode: \"F6\",\n            numBytes: \"2\",\n        },\n\n        OUT: {\n            opcode: \"D3\",\n            numBytes: \"2\",\n        },\n\n        PCHL: {\n            opcode: \"E9\",\n            numBytes: \"1\",\n        },\n\n        \"POP B\": {\n            opcode: \"C1\",\n            numBytes: \"1\",\n        },\n\n        \"POP D\": {\n            opcode: \"D1\",\n            numBytes: \"1\",\n        },\n\n        \"POP H\": {\n            opcode: \"E1\",\n            numBytes: \"1\",\n        },\n\n        \"POP PSW\": {\n            opcode: \"F1\",\n            numBytes: \"1\",\n        },\n\n        \"PUSH B\": {\n            opcode: \"C5\",\n            numBytes: \"1\",\n        },\n\n        \"PUSH D\": {\n            opcode: \"D5\",\n            numBytes: \"1\",\n        },\n\n        \"PUSH H\": {\n            opcode: \"E5\",\n            numBytes: \"1\",\n        },\n\n        \"PUSH PSW\": {\n            opcode: \"F5\",\n            numBytes: \"1\",\n        },\n\n        RAL: {\n            opcode: \"17\",\n            numBytes: \"1\",\n        },\n\n        RAR: {\n            opcode: \"1F\",\n            numBytes: \"1\",\n        },\n\n        RC: {\n            opcode: \"D8\",\n            numBytes: \"1\",\n        },\n\n        RET: {\n            opcode: \"C9\",\n            numBytes: \"1\",\n        },\n\n        RIM: {\n            opcode: \"20\",\n            numBytes: \"1\",\n        },\n\n        RLC: {\n            opcode: \"07\",\n            numBytes: \"1\",\n        },\n\n        RM: {\n            opcode: \"F8\",\n            numBytes: \"1\",\n        },\n\n        RNC: {\n            opcode: \"D0\",\n            numBytes: \"1\",\n        },\n\n        RNZ: {\n            opcode: \"C0\",\n            numBytes: \"1\",\n        },\n\n        RP: {\n            opcode: \"F0\",\n            numBytes: \"1\",\n        },\n\n        RPE: {\n            opcode: \"E8\",\n            numBytes: \"1\",\n        },\n\n        RPO: {\n            opcode: \"E0\",\n            numBytes: \"1\",\n        },\n\n        RRC: {\n            opcode: \"0F\",\n            numBytes: \"1\",\n        },\n\n        \"RST 0\": {\n            opcode: \"C7\",\n            numBytes: \"1\",\n        },\n\n        \"RST 1\": {\n            opcode: \"CF\",\n            numBytes: \"1\",\n        },\n\n        \"RST 2\": {\n            opcode: \"D7\",\n            numBytes: \"1\",\n        },\n\n        \"RST 3\": {\n            opcode: \"DF\",\n            numBytes: \"1\",\n        },\n\n        \"RST 4\": {\n            opcode: \"E7\",\n            numBytes: \"1\",\n        },\n\n        \"RST 5\": {\n            opcode: \"EF\",\n            numBytes: \"1\",\n        },\n\n        \"RST 6\": {\n            opcode: \"F7\",\n            numBytes: \"1\",\n        },\n\n        \"RST 7\": {\n            opcode: \"FF\",\n            numBytes: \"1\",\n        },\n\n        RZ: {\n            opcode: \"C8\",\n            numBytes: \"1\",\n        },\n\n        \"SBB A\": {\n            opcode: \"9F\",\n            numBytes: \"1\",\n        },\n\n        \"SBB B\": {\n            opcode: \"98\",\n            numBytes: \"1\",\n        },\n\n        \"SBB C\": {\n            opcode: \"99\",\n            numBytes: \"1\",\n        },\n\n        \"SBB D\": {\n            opcode: \"9A\",\n            numBytes: \"1\",\n        },\n\n        \"SBB E\": {\n            opcode: \"9B\",\n            numBytes: \"1\",\n        },\n\n        \"SBB H\": {\n            opcode: \"9C\",\n            numBytes: \"1\",\n        },\n\n        \"SBB L\": {\n            opcode: \"9D\",\n            numBytes: \"1\",\n        },\n\n        \"SBB M\": {\n            opcode: \"9E\",\n            numBytes: \"1\",\n        },\n\n        SBI: {\n            opcode: \"DE\",\n            numBytes: \"2\",\n        },\n\n        SHLD: {\n            opcode: \"22\",\n            numBytes: \"3\",\n        },\n\n        SIM: {\n            opcode: \"30\",\n            numBytes: \"1\",\n        },\n\n        SPHL: {\n            opcode: \"F9\",\n            numBytes: \"1\",\n        },\n\n        STA: {\n            opcode: \"32\",\n            numBytes: \"3\",\n        },\n\n        \"STAX B\": {\n            opcode: \"02\",\n            numBytes: \"1\",\n        },\n\n        \"STAX D\": {\n            opcode: \"12\",\n            numBytes: \"1\",\n        },\n\n        STC: {\n            opcode: \"37\",\n            numBytes: \"1\",\n        },\n\n        \"SUB A\": {\n            opcode: \"97\",\n            numBytes: \"1\",\n        },\n\n        \"SUB B\": {\n            opcode: \"90\",\n            numBytes: \"1\",\n        },\n\n        \"SUB C\": {\n            opcode: \"91\",\n            numBytes: \"1\",\n        },\n\n        \"SUB D\": {\n            opcode: \"92\",\n            numBytes: \"1\",\n        },\n\n        \"SUB E\": {\n            opcode: \"93\",\n            numBytes: \"1\",\n        },\n\n        \"SUB H\": {\n            opcode: \"94\",\n            numBytes: \"1\",\n        },\n\n        \"SUB L\": {\n            opcode: \"95\",\n            numBytes: \"1\",\n        },\n\n        \"SUB M\": {\n            opcode: \"96\",\n            numBytes: \"1\",\n        },\n\n        SUI: {\n            opcode: \"D6\",\n            numBytes: \"2\",\n        },\n\n        XCHG: {\n            opcode: \"EB\",\n            numBytes: \"1\",\n        },\n\n        \"XRA A\": {\n            opcode: \"AF\",\n            numBytes: \"1\",\n        },\n\n        \"XRA B\": {\n            opcode: \"A8\",\n            numBytes: \"1\",\n        },\n\n        \"XRA C\": {\n            opcode: \"A9\",\n            numBytes: \"1\",\n        },\n\n        \"XRA D\": {\n            opcode: \"AA\",\n            numBytes: \"1\",\n        },\n\n        \"XRA E\": {\n            opcode: \"AB\",\n            numBytes: \"1\",\n        },\n\n        \"XRA H\": {\n            opcode: \"AC\",\n            numBytes: \"1\",\n        },\n\n        \"XRA L\": {\n            opcode: \"AD\",\n            numBytes: \"1\",\n        },\n\n        \"XRA M\": {\n            opcode: \"AE\",\n            numBytes: \"1\",\n        },\n\n        XRI: {\n            opcode: \"EE\",\n            numBytes: \"2\",\n        },\n\n        XTHL: {\n            opcode: \"E3\",\n            numBytes: \"1\",\n        },\n    },\n};\n","import { numBytes, opcode } from \"./dataStructures\";\n\nconst errorDict = {\n    0: \"No Error\",\n    1: \"Invalid instruction\",\n    2: \"Invalid operand\",\n    3: \"Unknown label\",\n    4: \"Unknown error\",\n};\n\nfunction isHex(operand) {\n    /*  \n        Checks if the given data is a hexidecimal or not.\n        Returns true if the data is hexadecimal, else returns false.\n    */\n\n    let isHex = true;\n    let len = operand.length;\n\n    for (let i = 0; i < len; i++) {\n        if (\n            !(\n                (operand[i] >= \"0\" && operand[i] <= \"9\") ||\n                (operand[i] >= \"A\" && operand[i] <= \"F\")\n            )\n        ) {\n            isHex = false;\n        }\n    }\n\n    return isHex;\n}\n\nfunction checkInstructionError(instruction, label) {\n    /* \n        Checks whether a given instruction is valid or not.\n        Returns false if the instruction is valid, else returns true.\n    */\n\n    let isError = false;\n    let errorCode = 0;\n\n    try {\n        if (instruction in label) {\n            // for labels\n            return [isError, errorCode];\n        }\n\n        if (instruction in opcode) {\n            // for 1 byte instructions\n            return [isError, errorCode];\n        } else {\n            let mnemonic = instruction.split(\" \")[0];\n\n            var operand;\n\n            if (mnemonic in opcode) {\n                // for 2 byte instructions like ADI and 3 byte instructions like STA\n                let operand = instruction.split(\" \")[1];\n                let instructionSize = numBytes[mnemonic];\n\n                if (instructionSize === \"2\") {\n                    // for 2 byte instructions like ADI\n                    if (operand.length !== 2 || !isHex(operand)) {\n                        // to check if the operand is of 1 byte size\n                        isError = true;\n                        errorCode = 2;\n                    }\n                } else if (instructionSize === \"3\") {\n                    // for 3 byte instructions like STA\n                    if (\n                        (operand.length !== 4 || !isHex(operand)) &&\n                        !(operand + \":\" in label)\n                    ) {\n                        isError = true;\n                        errorCode = 2;\n                    }\n                }\n\n                return [isError, errorCode];\n            } else {\n                // for 2 byte instructions like MVI A and 3 byte instructions like LXI H\n                mnemonic = mnemonic + \" \" + instruction.split(\" \")[1];\n\n                if (mnemonic in opcode) {\n                    operand = instruction.split(\" \")[2];\n\n                    if (numBytes[mnemonic] === \"2\") {\n                        if (operand.length !== 2 || !isHex(operand)) {\n                            isError = true;\n                            errorCode = 2;\n                        }\n                    }\n\n                    if (numBytes[mnemonic] === \"3\") {\n                        if (\n                            (operand.length !== 4 || !isHex(operand)) &&\n                            !(operand + \":\" in label)\n                        ) {\n                            isError = true;\n                            errorCode = 2;\n                        }\n                    }\n                } else {\n                    isError = true;\n                    errorCode = 1;\n                }\n\n                return [isError, errorCode];\n            }\n        }\n    } catch (error) {\n        console.log(error);\n        isError = true;\n        errorCode = 4;\n        return [isError, errorCode];\n    }\n}\n\nfunction parse(instruction, label) {\n    /* \n        Parses the instruction to object code.\n        Returns the object code of the instruction if the instruction is valid.\n        Else returns error.\n    */\n\n    try {\n        let err = checkInstructionError(instruction, label);\n\n        if (err[0]) {\n            throw err;\n        }\n\n        let code = [];\n        let instructionSize = 0;\n        if (instruction in label) {\n            return;\n        }\n\n        if (instruction in opcode) {\n            // for 1 byte instructions\n            code = [opcode[instruction]];\n        } else {\n            // for all 2 & 3 byte instructions\n            let mnemonic = instruction.split(\" \")[0];\n\n            if (mnemonic in numBytes) {\n                // for 2 byte instructions like ADI and 3 byte instructions like STA\n                instructionSize = numBytes[mnemonic];\n\n                if (instructionSize === \"2\") {\n                    // for 2 byte instructions like ADI\n                    code = [opcode[mnemonic], instruction.split(\" \")[1]];\n                } else if (instructionSize === \"3\") {\n                    // for 3 byte instructions like STA\n                    var operand = instruction.split(\" \")[1];\n                    if (operand + \":\" in label)\n                        operand = String(label[operand + \":\"]);\n\n                    code = [\n                        opcode[mnemonic],\n                        operand.slice(2),\n                        operand.slice(0, 2),\n                    ];\n                }\n            } else {\n                // for 2 byte instructions like MVI A and 3 byte instructions like LXI H\n                mnemonic = mnemonic + \" \" + instruction.split(\" \")[1];\n                instructionSize = numBytes[mnemonic];\n\n                if (instructionSize === \"2\") {\n                    // for 2 byte instructions like MVI A\n                    code = [opcode[mnemonic], instruction.split(\" \")[2]];\n                } else {\n                    // for 3 byte instructions like LXI H\n                    operand = instruction.split(\" \")[2];\n                    if (operand + \":\" in label)\n                        operand = String(label[operand + \":\"]);\n\n                    code = [\n                        opcode[mnemonic],\n                        operand.slice(2),\n                        operand.slice(0, 2),\n                    ];\n                }\n            }\n        }\n\n        return code;\n    } catch (error) {\n        return errorDict[error[1]];\n    }\n}\n\nexport { checkInstructionError, parse };\n","/* \n    The list of instructions are given as input. The input is like \n    [\"MOV\", \"A\", \"B\", \"ADD\", \"B\", ...]. This is the instructionList.\n    \n    These are to be joined correctly to form proper instructions and stored\n    in instructions so that it is in the format [\"MOV A B\", \"ADD B\", ...].\n\n    Labels are of the format \"START:\", \"LOOP:\" etc. These are extracted from\n    the instructionList, and stored in labelList.\n\n    Labels are then paired with an address, and stored in label.\n\n    After this, the opcodes of the program is obtained using the datastructures \n    mentioned above.\n\n    If any error is found, the index of the error producing entity in \n    the instructionList is added to errorList.\n*/\n\nimport { checkInstructionError, parse } from \"./Resources/parse\";\nimport { numBytes, opcode } from \"./Resources/dataStructures\";\n\nconst startAddress = \"0000\";\n\nvar errorList = [];\nvar labelList = [];\nvar label = {};\n\nfunction getLabels(instructionList) {\n    /*\n        Adds the labels into the labelList from the given input instructionList.\n        All labels are of the format \"[A-Z]*:\". For example, \"START:\", \"LOOP:\".\n        So words found in this format are added to labelList.\n    */\n\n    let re = /[A-Z]*:/;\n\n    for (var i = 0; i < instructionList.length; i++) {\n        let cur = instructionList[i];\n\n        if (re.test(cur)) {\n            labelList.push(cur);\n        }\n    }\n}\n\nfunction getInstructions(instructionList) {\n    /* \n        Any instruction in 8085 assembly language can have a maximum of 3 words,\n        like \"LXI H 5000\". So iterating through every index, we set the 3 words.\n        Then we check whether the word 1 (one) alone makes up an instruction, if not\n        word 1 (one) + word 2 (two) make up an instruction and so on. The instruction \n        is added to instructionList.\n        If an error is found, then the index is of that error is added to errorList.\n    */\n\n    let instructions = [];\n\n    for (var i = 0; i < instructionList.length; i++) {\n        let curInstruction = \"\";\n        let one = instructionList[i];\n        let two, three;\n        if (i + 1 < instructionList.length) two = instructionList[i + 1];\n        if (i + 2 < instructionList.length) three = instructionList[i + 2];\n\n        if (labelList.includes(one)) {\n            curInstruction = one;\n            instructions.push(curInstruction);\n            continue;\n        }\n\n        if (one in opcode) {\n            curInstruction = one;\n\n            if (\n                numBytes[curInstruction] === \"2\" ||\n                numBytes[curInstruction] === \"3\"\n            ) {\n                curInstruction += \" \" + two;\n                instructions.push(curInstruction);\n\n                i = i + 1;\n            } else {\n                instructions.push(curInstruction);\n            }\n        }\n\n        if (one + \" \" + two in opcode) {\n            curInstruction = one + \" \" + two;\n\n            i = i + 1;\n\n            if (\n                numBytes[curInstruction] === \"2\" ||\n                numBytes[curInstruction] === \"3\"\n            ) {\n                curInstruction = curInstruction + \" \" + three;\n                instructions.push(curInstruction);\n                i = i + 1;\n            } else {\n                instructions.push(curInstruction);\n            }\n        }\n\n        if (one + \" \" + two + \" \" + three in opcode) {\n            curInstruction = one + \" \" + two + \" \" + three;\n            instructions.push(curInstruction);\n            i = i + 2;\n        }\n\n        if (curInstruction.length === 0) {\n            curInstruction = i;\n            errorList.push(curInstruction);\n        }\n    }\n    return instructions;\n}\n\nfunction getLabelMemoryLocation(instructions) {\n    let start = parseInt(startAddress);\n    let offset = 0;\n\n    for (let i = 0; i < instructions.length; i++) {\n        var curAddress = start + offset;\n\n        if (labelList.includes(instructions[i])) {\n            label[instructions[i]] = curAddress\n                .toString(16)\n                .toUpperCase()\n                .padStart(4, \"0\");\n        } else {\n            let curInstruction = instructions[i];\n            curInstruction = curInstruction.split(\" \");\n\n            let mnemonic = \"\";\n            for (let j = 0; j < curInstruction.length; j++) {\n                mnemonic += \" \" + curInstruction[j];\n                mnemonic = mnemonic.trim();\n\n                if (mnemonic in opcode) {\n                    offset += parseInt(numBytes[mnemonic]);\n                }\n            }\n        }\n    }\n}\n\nfunction getOpcodes(instructions) {\n    /* \n        The input will be an array of instructions.\n        Returns the opcode of the instructions.\n    */\n    let opcodeList = [];\n    try {\n        for (let i = 0; i < instructions.length; i++) {\n            if (checkInstructionError(instructions[i], label)[0]) {\n                // err = checkInstructionError(instructions[i]);\n                // throw(err);\n                // console.log(\"Error\")\n            }\n\n            let code = parse(instructions[i], label);\n            // console.log(code);\n            opcodeList.push(code);\n        }\n\n        return opcodeList;\n    } catch (err) {\n        console.log(err[1]);\n    }\n}\n\nfunction getAssembledInstructions(pgm) {\n    getLabels(pgm);\n    var instructions = getInstructions(pgm);\n    getLabelMemoryLocation(instructions);\n    var byteCodes = getOpcodes(instructions);\n    byteCodes = byteCodes.filter(Boolean);\n\n    var assembledJSON = {\n        byteCodes: byteCodes,\n        instructions: instructions,\n        errorCodes: errorList,\n    };\n\n    return assembledJSON;\n}\n\nexport { getAssembledInstructions };\n\n// pgm =\n//     \"START: LXI H 5000 MOV A M MOV B A MVI C 09 LOOP: ADD B DCR C JNZ LOOP INX H ADD M STA 5100 HLT\";\n// instructionList = pgm.split(\" \");\n// getLabels(instructionList);\n// console.log(pgm);\n// console.log(instructionList);\n// instructions = getInstructions(instructionList);\n// getLabelMemoryLocation(instructions);\n// console.log(label);\n// console.log(instructions);\n// byteCodes = getOpcodes(instructions);\n// byteCodes = byteCodes.filter(Boolean);\n// console.log(byteCodes);\n// console.log(errorList);\n// console.log(labelList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./Styles/NavBarStyles.scss\";\nimport Logo from \"../res/logo.png\";\nimport { navbarOnChange } from \"../Redux/Actions/navbarOnChange\";\nimport { memoryOnInit } from \"../Redux/Actions/memoryOnChangeAction\";\nimport { fileUploadPopup } from \"../Redux/Actions/bodyOnChangeAction\";\nimport { getAssembledInstructions } from \"./Processing/assembler\";\n\nexport class Navbar extends Component {\n    // Set state when project name is changed\n    handleProjectName = (e) => {\n        this.props.navbarOnChange(e.target.value);\n    };\n\n    // Call API and set state with response\n    handleAssemblyClick = (e) => {\n        var propsCopy = JSON.parse(JSON.stringify(this.props));\n\n        var payloadLocal = getAssembledInstructions(\n            propsCopy.editorText\n                .replace(/[\\r\\n\\t]+/gm, \" \")\n                .toUpperCase()\n                .split(\" \")\n        );\n\n        this.props.memoryOnInit({\n            byteCodes: payloadLocal.byteCodes,\n            instructions: payloadLocal.instructions,\n        });\n    };\n\n    // Generate a new <a> tag and\n    // click it\n    handleSaveClick = (e) => {\n        const blob = this.props.editorText;\n        const url = window.URL.createObjectURL(new Blob([blob]));\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", `${this.props.filename}.asm`);\n        link.click();\n        window.URL.revokeObjectURL(link.href);\n    };\n\n    handleOpenClick = (e) => {\n        this.props.fileUploadPopup();\n    };\n\n    // Move text field out of focus on enter\n    handleEnter = (e) => {\n        if (e.keyCode === 13) {\n            document.activeElement.blur();\n            return;\n        }\n    };\n\n    // Handling empty text field\n    handleBlur = (e) => {\n        if (e.target.value === \"\") {\n            this.props.navbarOnChange(\"Untitled\");\n        }\n    };\n\n    // Handle clicking on the pencil icon\n    handleOnPencilClick = (e) => {\n        document.getElementById(\"project-name-input\").select();\n    };\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <div className=\"navbar-items\">\n                    <ul className=\"navbar-head\">\n                        <li className=\"navbar-item\">\n                            <div className=\"logo-container\">\n                                <img\n                                    src={Logo}\n                                    alt=\"8085 Sim\"\n                                    className=\"logo\"\n                                />\n                            </div>\n                        </li>\n                        <li className=\"navbar-item\">\n                            <ul className=\"projDetails\">\n                                <li className=\"projectName\">\n                                    <input\n                                        type=\"text\"\n                                        id=\"project-name-input\"\n                                        value={this.props.filename}\n                                        onChange={this.handleProjectName}\n                                        onKeyDown={this.handleEnter}\n                                        onBlur={this.handleBlur}\n                                        style={{\n                                            width: `${\n                                                (this.props.filename.length +\n                                                    3) *\n                                                    8 >\n                                                176\n                                                    ? 176\n                                                    : (this.props.filename\n                                                          .length +\n                                                          3) *\n                                                      8\n                                            }px`,\n                                        }}\n                                    />\n                                    <i\n                                        className=\"fas fa-pen\"\n                                        onClick={this.handleOnPencilClick}\n                                    ></i>\n                                </li>\n                                <li className=\"projectAuthor\">8085sim</li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <ul className=\"navbar-tail\">\n                        <li\n                            className=\"navbar-item\"\n                            onClick={this.handleAssemblyClick}\n                        >\n                            <i className=\"fas fa-play\"></i>\n                            Assemble\n                        </li>\n                        <li\n                            className=\"navbar-item\"\n                            onClick={this.handleSaveClick}\n                        >\n                            <i className=\"fas fa-save\"></i>\n                            Save\n                        </li>\n                        <li\n                            className=\"navbar-item\"\n                            onClick={this.handleOpenClick}\n                        >\n                            <i className=\"fas fa-file-upload\"></i>\n                            Open\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        filename: state.navbarReducer.filename,\n        editorText: state.editorReducer.editorText,\n    };\n};\n\nexport default connect(mapStateToProps, {\n    memoryOnInit,\n    navbarOnChange,\n    fileUploadPopup,\n})(Navbar);\n","import * as actionTypes from \"./types\";\n\nexport const navbarOnChange = (filename) => (dispatch) => {\n    dispatch({\n        type: actionTypes.FILENAME_CHANGE,\n        payload: filename,\n    });\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Styles/BodyStyles.scss\";\nimport { registerReset } from \"../Redux/Actions/registerOnChangeAction\";\n\nexport class Registers extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dec: \"\",\n            hex: \"\",\n            bin: \"\",\n        };\n    }\n\n    onRegisterReset = (e) => {\n        this.props.registerReset();\n    };\n\n    // Utility functions :\n    // handleDecChange -> change in the decimal text field\n    // handleHexChange -> change in the hex text field\n    // handleBinChange -> change in the binary text field\n\n    handleDecChange = (e) => {\n        var decNumber;\n        var hexNumber;\n        var binNumber;\n\n        var re = /^$|^([0-9]){1,5}$/;\n        if (!re.test(e.target.value)) {\n            return;\n        }\n\n        if (e.target.value.length === 0) {\n            decNumber = \"\";\n            hexNumber = \"\";\n            binNumber = \"\";\n        } else {\n            decNumber = parseInt(e.target.value);\n            hexNumber = decNumber.toString(16).toUpperCase();\n            binNumber = (decNumber >>> 0).toString(2);\n        }\n\n        this.setState({\n            dec: \"\" + decNumber,\n            hex: \"\" + hexNumber,\n            bin: \"\" + binNumber,\n        });\n    };\n\n    handleHexChange = (e) => {\n        var decNumber;\n        var hexNumber;\n        var binNumber;\n\n        var re = /^$|^([0-9A-F]){1,4}$/;\n        if (!re.test(e.target.value.toUpperCase())) {\n            return;\n        }\n\n        if (e.target.value.length === 0) {\n            decNumber = \"\";\n            hexNumber = \"\";\n            binNumber = \"\";\n        } else {\n            decNumber = parseInt(e.target.value, 16);\n            hexNumber = e.target.value.toUpperCase();\n            binNumber = (decNumber >>> 0).toString(2);\n        }\n\n        this.setState({\n            dec: \"\" + decNumber,\n            hex: \"\" + hexNumber,\n            bin: \"\" + binNumber,\n        });\n    };\n\n    handleBinChange = (e) => {\n        var re = /^$|^([0-1]){1,12}$/;\n        if (!re.test(e.target.value)) {\n            return;\n        }\n\n        var decNumber;\n        var hexNumber;\n        var binNumber;\n\n        if (e.target.value.length === 0) {\n            decNumber = \"\";\n            hexNumber = \"\";\n            binNumber = \"\";\n        } else {\n            decNumber = parseInt(e.target.value, 2);\n            hexNumber = decNumber.toString(16).toUpperCase();\n            binNumber = e.target.value;\n        }\n\n        this.setState({\n            dec: \"\" + decNumber,\n            hex: \"\" + hexNumber,\n            bin: \"\" + binNumber,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"registers-container\">\n                <div className=\"header\">\n                    <h1>Registers</h1>\n                    <i\n                        className=\"fas fa-sync\"\n                        onClick={this.onRegisterReset}\n                    ></i>\n                </div>\n                <table className=\"primary-registers\">\n                    <tbody>\n                        <tr>\n                            <td>Accumulator</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.A}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>B Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.B}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>C Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.C}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>D Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.D}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>E Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.E}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>H Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.H}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>L Register</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.L}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Memory</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.M}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Program Counter</td>\n                            <td className=\"register-value\">\n                                {this.props.primaryRegisters.PC}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table className=\"flag-registers\">\n                    <tbody>\n                        <tr>\n                            <td className=\"register-value\">S</td>\n                            <td className=\"register-value\">Z</td>\n                            <td className=\"register-value\">AC</td>\n                            <td className=\"register-value\">P</td>\n                            <td className=\"register-value\">CY</td>\n                        </tr>\n                        <tr>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.S}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.Z}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.AC}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.P}\n                            </td>\n                            <td className=\"register-value\">\n                                {this.props.flagRegisters.CY}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table className=\"number-converter\">\n                    <tbody>\n                        <tr>\n                            <td className=\"register-value register-label\">\n                                Dec\n                            </td>\n                            <td className=\"register-value register-label\">\n                                Hex\n                            </td>\n                            <td className=\"register-value register-label\">\n                                Bin\n                            </td>\n                        </tr>\n                        <tr>\n                            <td className=\"register-value\">\n                                <input\n                                    type=\"text\"\n                                    value={this.state.dec}\n                                    onChange={this.handleDecChange}\n                                />\n                            </td>\n                            <td className=\"register-value\">\n                                <input\n                                    type=\"text\"\n                                    value={this.state.hex}\n                                    onChange={this.handleHexChange}\n                                />\n                            </td>\n                            <td className=\"register-value\">\n                                <input\n                                    type=\"text\"\n                                    value={this.state.bin}\n                                    onChange={this.handleBinChange}\n                                />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        primaryRegisters: state.registerReducer.primaryRegisters,\n        flagRegisters: state.registerReducer.flagRegisters,\n    };\n};\n\nexport default connect(mapStateToProps, { registerReset })(Registers);\n","import * as actionTypes from \"./types\";\n\nexport const registerReset = () => (dispatch) => {\n    dispatch({\n        type: actionTypes.REGISTER_RESET,\n        payload: \"\",\n    });\n};\n","// Defining the custom language for Monaco Editor\n// with Intel 8085 Micro processor syntax\n\nexport const SIM_LANG = {\n    defaultToken: \"invalid\",\n    ignoreCase: \"true\",\n\n    keywords: [\n        \"ACI\",\n        \"aci\",\n        \"ADC\",\n        \"adc\",\n        \"ADD\",\n        \"add\",\n        \"ADI\",\n        \"adi\",\n        \"ANA\",\n        \"ana\",\n        \"ANI\",\n        \"ani\",\n        \"CALL\",\n        \"call\",\n        \"CC\",\n        \"cc\",\n        \"CM\",\n        \"cm\",\n        \"CMA\",\n        \"cma\",\n        \"CMC\",\n        \"cmc\",\n        \"CMP\",\n        \"cmp\",\n        \"CNC\",\n        \"cnc\",\n        \"CNZ\",\n        \"cnz\",\n        \"CP\",\n        \"cp\",\n        \"CPE\",\n        \"cpe\",\n        \"CPI\",\n        \"cpi\",\n        \"CPO\",\n        \"cpo\",\n        \"CZ\",\n        \"cz\",\n        \"DAA\",\n        \"daa\",\n        \"DAD\",\n        \"dad\",\n        \"DCR\",\n        \"dcr\",\n        \"DCX\",\n        \"dcx\",\n        \"DI\",\n        \"di\",\n        \"EI\",\n        \"ei\",\n        \"HLT\",\n        \"hlt\",\n        \"IN\",\n        \"in\",\n        \"INR\",\n        \"inr\",\n        \"INX\",\n        \"inx\",\n        \"JC\",\n        \"jc\",\n        \"JM\",\n        \"jm\",\n        \"JMP\",\n        \"jmp\",\n        \"JNC\",\n        \"jnc\",\n        \"JNZ\",\n        \"jnz\",\n        \"JP\",\n        \"jp\",\n        \"JPE\",\n        \"jpe\",\n        \"JPO\",\n        \"jpo\",\n        \"JZ\",\n        \"jz\",\n        \"LDA\",\n        \"lda\",\n        \"LDAX\",\n        \"ldax\",\n        \"LHLD\",\n        \"lhld\",\n        \"LXI\",\n        \"lxi\",\n        \"MOV\",\n        \"mov\",\n        \"MVI\",\n        \"mvi\",\n        \"NOP\",\n        \"nop\",\n        \"ORA\",\n        \"ora\",\n        \"ORI\",\n        \"ori\",\n        \"OUT\",\n        \"out\",\n        \"PCHL\",\n        \"pchl\",\n        \"POP\",\n        \"pop\",\n        \"PUSH\",\n        \"push\",\n        \"RAL\",\n        \"ral\",\n        \"RAR\",\n        \"rar\",\n        \"RC\",\n        \"rc\",\n        \"RET\",\n        \"ret\",\n        \"RIM\",\n        \"rim\",\n        \"RLC\",\n        \"rlc\",\n        \"RM\",\n        \"rm\",\n        \"RNC\",\n        \"rnc\",\n        \"RNZ\",\n        \"rnz\",\n        \"RP\",\n        \"rp\",\n        \"RPE\",\n        \"rpe\",\n        \"RPO\",\n        \"rpo\",\n        \"RRC\",\n        \"rrc\",\n        \"RST\",\n        \"rst\",\n        \"RZ\",\n        \"rz\",\n        \"SBB\",\n        \"sbb\",\n        \"SBI\",\n        \"sbi\",\n        \"SHLD\",\n        \"shld\",\n        \"SIM\",\n        \"sim\",\n        \"SPHL\",\n        \"sphl\",\n        \"STA\",\n        \"sta\",\n        \"STAX\",\n        \"stax\",\n        \"STC\",\n        \"stc\",\n        \"SUB\",\n        \"sub\",\n        \"SUI\",\n        \"sui\",\n        \"XCHG\",\n        \"xchg\",\n        \"XRA\",\n        \"xra\",\n        \"XRI\",\n        \"xri\",\n        \"XTHL\",\n        \"xthl\",\n    ],\n\n    registers: [\n        \"A\",\n        \"a\",\n        \"B\",\n        \"b\",\n        \"C\",\n        \"c\",\n        \"D\",\n        \"d\",\n        \"E\",\n        \"e\",\n        \"H\",\n        \"h\",\n        \"L\",\n        \"l\",\n        \"M\",\n        \"m\",\n        \"S\",\n        \"s\",\n        \"Z\",\n        \"z\",\n        \"AC\",\n        \"ac\",\n        \"P\",\n        \"p\",\n        \"CY\",\n        \"cy\",\n    ],\n\n    label: /^[a-zA-Z]*:$/,\n\n    tokenizer: {\n        root: [\n            { include: \"@whitespace\" },\n\n            // Keywords\n            [\n                /[a-zA-Z_][\\w_]*('*)/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword\",\n                        \"@registers\": \"registers\",\n                        \"@default\": \"invalid\",\n                    },\n                },\n            ],\n\n            // Labels\n            [/@label/, \"label\"],\n        ],\n\n        whitespace: [\n            [/[ \\t\\r\\n]+/, \"white\"],\n            [/;.*$/, \"comment\"],\n        ],\n    },\n};\n\nexport default SIM_LANG;\n","// Defining the theme with custom syntax highlighting\n// for the Intel 8085 Microprocessor instruction set\n\nexport const SIM_THEME = {\n    base: \"vs-dark\", // can also be vs-dark or hc-black\n    inherit: false, // can also be false to completely replace the builtin rules\n    rules: [\n        { token: \"invalid\", foreground: \"ffffff\" },\n        { token: \"keyword\", foreground: \"569cd6\" },\n        { token: \"registers\", foreground: \"ce9178\" },\n        { token: \"comment\", foreground: \"808080\" },\n        { token: \"label\", foreground: \"00FF00\" },\n    ],\n    colors: {\n        \"editor.background\": \"#1f2227\",\n        \"editorCursor.foreground\": \"#586677\",\n        \"editor.selectionBackground\": \"#153840\",\n    },\n};\n\nexport default SIM_THEME;\n","import React, { useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { monaco } from \"@monaco-editor/react\";\n\nimport \"./Styles/BodyStyles.scss\";\nimport SIM_LANG from \"./EditorConfig/language\";\nimport SIM_THEME from \"./EditorConfig/theme\";\nimport { editorOnChange } from \"../Redux/Actions/editorOnChangeAction\";\nimport { bodyOnChange } from \"../Redux/Actions/bodyOnChangeAction\";\nimport { getAssembledInstructions } from \"./Processing/assembler\";\n\nexport const Editor = (props) => {\n    const [large, setLarge] = useState(0);\n    var editorRef = useRef();\n\n    window.addEventListener(\"resize\", handleEditorWidth);\n\n    // Save a reference to the editor\n    // editorRef will be used to get the value later\n    function handleEditor(editor) {\n        editorRef = editor;\n        editorRef.onDidChangeContent(handleContentChange);\n    }\n\n    // handle 4K displays\n    function handleEditorWidth() {\n        if (window.innerWidth >= 2560) setLarge(1);\n        else setLarge(0);\n    }\n\n    // Change the state whenever content of the editor changes\n    function handleContentChange(e) {\n        props.editorOnChange(editorRef.getValue());\n    }\n\n    // Change editor view\n    function onViewChange(e) {\n        props.bodyOnChange(!props.editorView);\n    }\n\n    // Handle Formatter of Editor\n    function onFormat(model, options, token) {\n        var instructionArray = getAssembledInstructions(\n            model\n                .getValue()\n                .replace(/[\\r\\n\\t]+/gm, \" \")\n                .toUpperCase()\n                .split(\" \")\n        );\n        console.log(instructionArray);\n\n        var formattedString = \"\";\n        instructionArray.instructions.map((value, index) => {\n            if (value.endsWith(\":\")) {\n                formattedString += value + \"\\n\";\n            } else {\n                formattedString += \"\\t\\t\" + value + \"\\n\";\n            }\n            return value;\n        });\n\n        console.log(formattedString);\n\n        return [\n            {\n                range: {\n                    startLineNumber: 1,\n                    startColumn: 1,\n                    endLineNumber: model.getLineCount() + 1,\n                    endColumn: 1,\n                },\n                text: formattedString,\n            },\n        ];\n    }\n\n    // Initialise editor with following properties :\n    // value -> Initial Value of the editor\n    // language -> Custom language defined and imported as sim-lang\n    // theme -> Custom theme with syntax highlighting for specific language defined\n    //          and imported as sim-dark\n    // scrollbar -> Options to reduce the size from the default\n    // minimap -> Enable/Disable the minimap for the Monaco Editor\n    monaco\n        .init()\n        .then((monacoInstance) => {\n            const wrapper = document.getElementById(\"editor-child\");\n            const properties = {\n                value: \"\",\n                language: \"sim-lang\",\n                theme: \"sim-dark\",\n                height: \"100%\",\n                fontSize: large === 1 ? \"28px\" : \"16px\",\n                automaticLayout: true,\n                scrollbar: {\n                    useShadows: false,\n                    vertical: \"auto\",\n                    horizontal: \"auto\",\n                    verticalScrollbarSize: 4,\n                    horizontalScrollbarSize: 4,\n                },\n                minimap: {\n                    enabled: false,\n                },\n            };\n\n            monacoInstance.languages.register({ id: \"sim-lang\" });\n            monacoInstance.languages.setMonarchTokensProvider(\n                \"sim-lang\",\n                SIM_LANG\n            );\n            monacoInstance.languages.registerDocumentFormattingEditProvider(\n                \"sim-lang\",\n                {\n                    provideDocumentFormattingEdits: onFormat,\n                }\n            );\n            monacoInstance.editor.defineTheme(\"sim-dark\", SIM_THEME);\n            monacoInstance.editor.onDidCreateModel(handleEditor);\n            monacoInstance.editor.create(wrapper, properties);\n        })\n        .then(() => {\n            editorRef.setValue(props.editorDisappearText);\n        })\n        .catch((error) =>\n            console.error(\n                \"An error occurred during initialization of Monaco: \",\n                error\n            )\n        );\n\n    return (\n        <div id=\"editor-container\" className=\"editor-container\">\n            <div className=\"header\">\n                <h1>Editor</h1>\n                <i className=\"fas fa-table\" onClick={onViewChange}></i>\n            </div>\n            <div id=\"editor-child\" className=\"editor-child\"></div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        editorView: state.bodyReducer.editorView,\n        editorDisappearText: state.bodyReducer.editorDisappearText,\n    };\n};\n\nexport default connect(mapStateToProps, {\n    editorOnChange,\n    bodyOnChange,\n})(Editor);\n","import * as actionTypes from \"./types\";\n\nexport const editorOnChange = (editorText) => (dispatch) => {\n    dispatch({\n        type: actionTypes.EDITOR_CHANGE,\n        payload: editorText,\n    });\n};\n\nexport const editorOnUpload = (editorText) => (dispatch, getState) => {\n    dispatch({\n        type: actionTypes.FILEOPEN_POPUP,\n        payload: {\n            popupView: !getState().bodyReducer.popupView,\n            editorText: editorText,\n        },\n    });\n};\n","// START:\tLXI H,5000\n// \tMOV A,M\n// \tMOV B,A\n// \tMVI C,09\n// LOOP:\tADD B\n// \tDCR C\n// \tJNZ LOOP\n// \tINX H\n// \tADD M\n// \tSTA 5100\n// \tHLT\n\n// [\n//     [ '21', '00', '50' ],\n//     [ '7E' ],\n//     [ '47' ],\n//     [ '0E', '09' ],\n//     [ '80' ],\n//     [ '0D' ],\n//     [ 'C2', '07', '00' ],\n//     [ '23' ],\n//     [ '86' ],\n//     [ '32', '00', '51' ],\n//     [ '76' ]\n//   ]\n\nString.prototype.count = function (s1) {\n    return (\n        (this.length - this.replace(new RegExp(s1, \"g\"), \"\").length) / s1.length\n    );\n};\n\nfunction execute(jsonInput) {\n    // Input\n    // {\n    //     instructions: [ (array opcodes returned from server) ]\n    //     start-instruction: (index from where to start execution)\n    //     steps: (number of instructions to process)\n    //     primary-registers: {\n    //         A: \"00\"\n    //         B: \"00\"\n    //         C: \"00\"\n    //         ...\n    //     }\n\n    //     flag-registers: {\n    //         S: \"00\"\n    //         CY: \"00\"\n    //         Z: \"00\"\n    //         ...\n    //     }\n\n    //     memory: [\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         .... (4095 times)\n    //     ]\n    // }\n\n    // output\n    // {\n    //     primary-registers: {\n    //         A: \"00\"\n    //         B: \"00\"\n    //         C: \"00\"\n    //         ...\n    //     }\n\n    //     flag-registers: {\n    //         S: \"00\"\n    //         CY: \"00\"\n    //         Z: \"00\"\n    //         ...\n    //     }\n\n    //     memory: [\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         [0, 0, 0, 0, ... (16 times)],\n    //         .... (4095 times)\n    //     ]\n    // }\n\n    let instructions = jsonInput[\"instructions\"];\n    let start_index = jsonInput[\"start-instruction\"];\n    let steps = jsonInput[\"steps\"];\n    let genReg = jsonInput[\"primary-registers\"];\n    let flagReg = jsonInput[\"flag-registers\"];\n    let memory = jsonInput[\"memory\"];\n\n    let ret;\n    for (let x = 0; x < steps; x++) {\n        // console.log(instructions[start_index + x]);\n        ret = instruction_def(\n            instructions[start_index + x],\n            genReg,\n            flagReg,\n            memory\n        );\n        genReg = ret[0];\n        flagReg = ret[1];\n        memory = ret[2];\n\n        // console.log(genReg);\n        // console.log(flagReg);\n    }\n\n    let idx = getMemoryIndex(5000);\n    // console.log(memory[idx[0]][idx[1]]);\n\n    return {\n        primaryRegisters: genReg,\n        flagRegisters: flagReg,\n        memory: memory,\n    };\n}\n\nfunction getMemoryIndex(address) {\n    let i = parseInt(address / 16);\n    let j = parseInt(address % 16);\n\n    return [i, j];\n}\n\nfunction setFlagReg(acc, flagReg) {\n    let bin = acc;\n    bin = (bin >>> 0).toString(2).padStart(8, \"0\").slice(-8);\n\n    if (bin[0] === \"1\") {\n        flagReg[\"S\"] = \"1\";\n    } else {\n        flagReg[\"S\"] = \"0\";\n    }\n\n    if (bin.count(\"1\") === 0) {\n        flagReg[\"Z\"] = \"1\";\n    } else {\n        flagReg[\"Z\"] = \"0\";\n    }\n\n    if (bin.count(\"1\") % 2 === 0) {\n        flagReg[\"P\"] = \"1\";\n    } else {\n        flagReg[\"P\"] = \"0\";\n    }\n\n    if ((acc >>> 0).toString(2).padStart(9, \"0\").slice(-9)[0] === \"1\") {\n        flagReg[\"CY\"] = \"1\";\n    } else {\n        flagReg[\"CY\"] = \"0\";\n    }\n\n    return flagReg;\n}\n\nfunction adc(reg, genReg, flagReg) {\n    let operand1 = genReg[\"A\"];\n    let operand2 = genReg[reg];\n    let operand3 = flagReg[\"CY\"];\n\n    operand1 = parseInt(operand1, 16);\n    operand2 = parseInt(operand2, 16);\n    operand3 = parseInt(operand3, 16);\n\n    operand1 += operand2 + operand3;\n    flagReg = setFlagReg(operand1, flagReg);\n\n    operand1 = operand1.toString(16).toUpperCase().padStart(2, \"0\").slice(-2);\n    genReg[\"A\"] = operand1;\n\n    return [genReg, flagReg];\n}\n\nfunction add(reg, genReg, flagReg) {\n    let operand1 = genReg[\"A\"];\n    operand1 = parseInt(operand1, 16);\n    let operand2;\n\n    operand2 = genReg[reg];\n    operand2 = parseInt(operand2, 16);\n\n    operand1 += operand2;\n\n    flagReg = setFlagReg(operand1, flagReg);\n\n    operand1 = operand1.toString(16).toUpperCase().padStart(2, \"0\").slice(-2);\n    genReg[\"A\"] = operand1;\n\n    return [genReg, flagReg];\n}\n\nfunction ana(reg, genReg, flagReg) {\n    let operand1 = genReg[\"A\"];\n    let operand2 = genReg[reg];\n\n    operand1 = parseInt(operand1, 16);\n    operand2 = parseInt(operand2, 16);\n\n    operand1 = operand1 & operand2;\n    flagReg = setFlagReg(operand1, flagReg);\n\n    operand1 = operand1.toString(16).toUpperCase().padStart(2, \"0\").slice(-2);\n    genReg[\"A\"] = operand1;\n\n    return [genReg, flagReg];\n}\n\nfunction dcr(reg, genReg, flagReg) {\n    let operand = genReg[reg];\n\n    operand = parseInt(operand, 16);\n    operand -= 1;\n    flagReg = setFlagReg(operand, flagReg);\n    operand = operand.toString(16);\n    operand = operand.toUpperCase().padStart(2, \"0\").slice(-2);\n    genReg[reg] = operand;\n\n    return [genReg, flagReg];\n}\n\nfunction inr(reg, genReg, flagReg) {\n    let operand = genReg[reg];\n\n    operand = parseInt(operand, 16);\n\n    operand += 1;\n    operand.toString(16);\n    flagReg = setFlagReg(operand, flagReg);\n    operand = operand.toUpperCase().padStart(2, \"0\").slice(-2);\n    genReg[reg] = operand;\n\n    return [genReg, flagReg];\n}\n\nfunction inx(reg, genReg) {\n    let operand;\n\n    switch (reg) {\n        case \"B\":\n            operand = genReg[\"B\"] + genReg[\"C\"];\n            operand = parseInt(operand, 16);\n            operand++;\n            operand = operand.toString(16).toUpperCase().padStart(4, \"0\");\n            genReg[\"B\"] = operand.slice(0, 2);\n            genReg[\"C\"] = operand.slice(-2);\n            break;\n\n        case \"D\":\n            operand = genReg[\"D\"] + genReg[\"E\"];\n            operand = parseInt(operand, 16);\n            operand++;\n            operand = operand.toString(16).toUpperCase().padStart(4, \"0\");\n            genReg[\"D\"] = operand.slice(0, 2);\n            genReg[\"E\"] = operand.slice(-2);\n            break;\n\n        case \"H\":\n            operand = genReg[\"H\"] + genReg[\"L\"];\n            operand = parseInt(operand, 16);\n            operand++;\n            operand = operand.toString(16).toUpperCase().padStart(4, \"0\");\n            genReg[\"H\"] = operand.slice(0, 2);\n            genReg[\"L\"] = operand.slice(-2);\n            break;\n\n        case \"SP\":\n            operand = genReg[\"SP\"];\n            operand = parseInt(operand, 16);\n            operand++;\n            operand = operand\n                .toString(16)\n                .toUpperCase()\n                .padStart(4, \"0\")\n                .slice(-4);\n            genReg[\"SP\"] = operand;\n            break;\n\n        default:\n            console.log(\"lol\");\n    }\n\n    return genReg;\n}\n\nfunction lxi(reg, byte3, byte2, genReg) {\n    switch (reg) {\n        case \"B\":\n            genReg[\"B\"] = byte2;\n            genReg[\"C\"] = byte3;\n            break;\n\n        case \"D\":\n            genReg[\"D\"] = byte2;\n            genReg[\"E\"] = byte3;\n            break;\n\n        case \"H\":\n            genReg[\"H\"] = byte2;\n            genReg[\"L\"] = byte3;\n            break;\n\n        case \"SP\":\n            genReg[\"SP\"] = byte2 + byte3;\n            break;\n\n        default:\n            console.log(\"oh damn!\");\n    }\n    return genReg;\n}\n\nfunction instruction_def(instruction, genReg, flagReg, memory) {\n    let tempAdd;\n    let memoryIndex;\n    let i;\n    let j;\n    let reg;\n    let byte3;\n    let byte2;\n    let numBytes;\n\n    let opcode = instruction[0];\n\n    switch (opcode) {\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // ACI statement\n        case \"CE\":\n            // ACI 8bit_data\n            byte2 = instruction[1];\n            byte2 = parseInt(byte2, 16);\n            genReg[\"A\"] =\n                parseInt(genReg[\"A\"]) + byte2 + parseInt(flagReg[\"CY\"]);\n            flagReg = setFlagReg(genReg[\"A\"], flagReg);\n            genReg[\"A\"] = genReg[\"A\"]\n                .toString(16)\n                .toUpperCase()\n                .padStart(2, \"0\")\n                .slice(-2);\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // ADC statements\n        case \"8F\":\n            // ADC A\n            reg = adc(\"A\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"88\":\n            // ADC B\n            reg = adc(\"B\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"89\":\n            // ADC C\n            reg = adc(\"C\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"8A\":\n            // ADC D\n            reg = adc(\"D\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"8B\":\n            // ADC E\n            reg = adc(\"E\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"8C\":\n            // ADC F\n            reg = adc(\"F\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"8D\":\n            // ADC L\n            reg = adc(\"L\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"8E\":\n            // ADC M\n            reg = adc(\"M\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // ADD statements\n        case \"87\":\n            // ADD A\n            reg = add(\"A\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"80\":\n            // ADD B\n            reg = add(\"B\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"81\":\n            // ADD C\n            reg = add(\"C\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"82\":\n            // ADD D\n            reg = add(\"D\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"83\":\n            // ADD E\n            reg = add(\"E\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"84\":\n            // ADD H\n            reg = add(\"H\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"85\":\n            // ADD L\n            reg = add(\"L\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"86\":\n            // ADD M\n            reg = add(\"M\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // ADI statement\n        case \"C6\":\n            byte2 = instruction[1];\n            byte2 = parseInt(byte2, 16);\n            genReg[\"A\"] = parseInt(genReg[\"A\"], 16);\n            genReg[\"A\"] += byte2;\n            flagReg = setFlagReg(genReg[\"A\"], flagReg);\n            genReg[\"A\"] = genReg[\"A\"]\n                .toString(16)\n                .toUpperCase()\n                .padStart(2, \"0\")\n                .slice(-2);\n\n            numBytes = 2;\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // ANA statements\n        case \"A7\":\n            // ANA A\n            reg = ana(\"A\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A0\":\n            // ANA B\n            reg = ana(\"B\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A1\":\n            // ANA C\n            reg = ana(\"C\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A2\":\n            // ANA D\n            reg = ana(\"D\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A3\":\n            // ANA E\n            reg = ana(\"E\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A4\":\n            // ANA H\n            reg = ana(\"H\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A5\":\n            // ANA L\n            reg = ana(\"L\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        case \"A6\":\n            // ANA M\n            reg = ana(\"M\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n            numBytes = 1;\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // ANI statement\n        case \"E6\":\n            // ANI 8bit_data\n            byte2 = instruction[1];\n            byte2 = parseInt(byte2, 16);\n            genReg[\"A\"] = parseInt(genReg[\"A\"], 16);\n            genReg[\"A\"] = genReg[\"A\"] & byte2;\n            flagReg = setFlagReg(genReg[\"A\"], flagReg);\n            genReg[\"A\"] = genReg[\"A\"]\n                .toString(16)\n                .toUpperCase()\n                .padStart(2, \"0\")\n                .slice(-2);\n\n            numBytes = 2;\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // CALL statement\n        case \"CD\":\n            // CALL 16bit_data\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // CC statement\n        case \"DC\":\n            // CC 16bit_data\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // CM statement\n        case \"FC\":\n            // CM 16bit_data\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // CMA statement\n        case \"2F\":\n            // CMA\n            genReg[\"A\"] = parseInt(genReg[\"A\"] - 1, 16);\n            genReg[\"A\"] = (genReg[\"A\"] >>> 0).toString(2).slice(-8);\n            genReg[\"A\"] = parseInt(genReg[\"A\"], 2);\n            genReg[\"A\"] = genReg[\"A\"]\n                .toString(16)\n                .toUpperCase()\n                .padStart(2, \"0\")\n                .slice(-2);\n\n            numBytes = 1;\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // CMC statement\n        case \"3F\":\n            // CMC\n            if (flagReg[\"CY\"] === \"0\") {\n                flagReg[\"CY\"] = \"1\";\n            } else if (flagReg[\"CY\"] === \"1\") {\n                flagReg[\"CY\"] = \"0\";\n            }\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // CMP statements\n\n        //\n\n        // DCR statements\n        case \"3D\":\n            // DCR A\n            reg = dcr(\"A\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"05\":\n            // DCR B\n            reg = dcr(\"B\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"0D\":\n            // DCR C\n            reg = dcr(\"C\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"15\":\n            // DCR D\n            reg = dcr(\"D\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"1D\":\n            // DCR E\n            reg = dcr(\"E\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"25\":\n            // DCR H\n            reg = dcr(\"H\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"2D\":\n            // DCR L\n            reg = dcr(\"L\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"35\":\n            // DCR M\n            reg = dcr(\"M\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // HLT statement\n        case \"76\":\n            // HLT\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // INR statements\n        case \"3C\":\n            // INR A\n            reg = inr(\"A\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"04\":\n            // INR B\n            reg = inr(\"B\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"0C\":\n            // INR C\n            reg = inr(\"C\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"14\":\n            // INR D\n            reg = inr(\"D\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"1C\":\n            // INR E\n            reg = inr(\"E\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"24\":\n            // INR H\n            reg = inr(\"H\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"2C\":\n            // INR L\n            reg = inr(\"L\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        case \"34\":\n            // INR M\n            reg = inr(\"M\", genReg, flagReg);\n            genReg = reg[0];\n            flagReg = reg[1];\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // INX statements\n        case \"03\":\n            // INX B\n            genReg = inx(\"B\", genReg);\n\n            numBytes = 1;\n\n            break;\n\n        case \"13\":\n            // INX D\n            genReg = inx(\"D\", genReg);\n\n            numBytes = 1;\n\n            break;\n\n        case \"23\":\n            // INX H\n            genReg = inx(\"H\", genReg);\n\n            numBytes = 1;\n\n            break;\n\n        case \"33\":\n            // INX SP\n            genReg = inx(\"SP\", genReg);\n\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // JNZ statement\n        case \"C2\":\n            // JNZ 16bit_data\n            byte3 = instruction[1];\n            byte2 = instruction[2];\n\n            if (flagReg[\"Z\"] !== \"0\") {\n                genReg[\"PC\"] = byte2 + byte3;\n            } else {\n                let pc = genReg[\"PC\"];\n                pc = parseInt(pc, 16) + 3;\n                pc = pc.toString(16).toUpperCase().padStart(4, \"0\");\n                genReg[\"PC\"] = pc;\n            }\n\n            numBytes = 3;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // LXI statements\n        case \"01\":\n            // LXI B 16bit_data\n            reg = \"B\";\n            byte3 = instruction[1];\n            byte2 = instruction[2];\n\n            genReg = lxi(reg, byte3, byte2, genReg);\n\n            numBytes = 3;\n\n            break;\n\n        case \"11\":\n            // LXI D 16bit_data\n            reg = \"D\";\n            byte3 = instruction[1];\n            byte2 = instruction[2];\n\n            genReg = lxi(reg, byte3, byte2, genReg);\n\n            numBytes = 3;\n\n            break;\n\n        case \"21\":\n            // LXI H 16bit_data\n            reg = \"H\";\n            byte3 = instruction[1];\n            byte2 = instruction[2];\n\n            genReg = lxi(reg, byte3, byte2, genReg);\n\n            numBytes = 3;\n\n            break;\n\n        case \"31\":\n            // LXI SP 16bit_data\n            reg = \"SP\";\n            byte3 = instruction[1];\n            byte2 = instruction[2];\n\n            genReg = lxi(reg, byte3, byte2, genReg);\n\n            numBytes = 3;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // MOV statements\n        case \"7F\":\n            // MOV A A\n\n            numBytes = 1;\n\n            break;\n\n        case \"78\":\n            // MOV A B\n            genReg[\"A\"] = genReg[\"B\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"79\":\n            // MOV A C\n            genReg[\"A\"] = genReg[\"C\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"7A\":\n            // MOV A D\n            genReg[\"A\"] = genReg[\"D\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"7B\":\n            // MOV A E\n            genReg[\"A\"] = genReg[\"E\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"7C\":\n            // MOV A H\n            genReg[\"A\"] = genReg[\"H\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"7D\":\n            // MOV A L\n            genReg[\"A\"] = genReg[\"L\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"7E\":\n            // MOV A M\n            genReg[\"A\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"47\":\n            // MOV B A\n            genReg[\"B\"] = genReg[\"A\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"40\":\n            // MOV B B\n\n            numBytes = 1;\n\n            break;\n\n        case \"41\":\n            // MOV B C\n            genReg[\"B\"] = genReg[\"C\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"42\":\n            // MOV B D\n            genReg[\"B\"] = genReg[\"D\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"43\":\n            // MOV B E\n            genReg[\"B\"] = genReg[\"E\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"44\":\n            // MOV B H\n            genReg[\"B\"] = genReg[\"H\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"45\":\n            // MOV B L\n            genReg[\"B\"] = genReg[\"L\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"46\":\n            // MOV B M\n            genReg[\"B\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"4F\":\n            // MOV C A\n            genReg[\"C\"] = genReg[\"A\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"48\":\n            // MOV C B\n            genReg[\"C\"] = genReg[\"B\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"49\":\n            // MOV C C\n\n            numBytes = 1;\n\n            break;\n\n        case \"4A\":\n            // MOV C D\n            genReg[\"C\"] = genReg[\"D\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"4B\":\n            // MOV C E\n            genReg[\"C\"] = genReg[\"E\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"4C\":\n            // MOV C H\n            genReg[\"C\"] = genReg[\"H\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"4D\":\n            // MOV C L\n            genReg[\"C\"] = genReg[\"L\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"4E\":\n            // MOV C M\n            genReg[\"C\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"57\":\n            // MOV D A\n            genReg[\"D\"] = genReg[\"A\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"50\":\n            // MOV D B\n            genReg[\"D\"] = genReg[\"B\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"51\":\n            // MOV D C\n            genReg[\"D\"] = genReg[\"C\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"52\":\n            // MOV D D\n\n            numBytes = 1;\n\n            break;\n\n        case \"53\":\n            // MOV D E\n            genReg[\"D\"] = genReg[\"E\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"54\":\n            // MOV D H\n            genReg[\"D\"] = genReg[\"H\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"55\":\n            // MOV D L\n            genReg[\"D\"] = genReg[\"L\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"56\":\n            // MOV D M\n            genReg[\"D\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"5F\":\n            // MOV E A\n            genReg[\"E\"] = genReg[\"A\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"58\":\n            // MOV E B\n            genReg[\"E\"] = genReg[\"B\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"59\":\n            // MOV E C\n            genReg[\"E\"] = genReg[\"C\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"5A\":\n            // MOV E D\n            genReg[\"E\"] = genReg[\"D\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"5B\":\n            // MOV E E\n\n            numBytes = 1;\n\n            break;\n\n        case \"5C\":\n            // MOV E H\n            genReg[\"E\"] = genReg[\"H\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"5D\":\n            // MOV E L\n            genReg[\"E\"] = genReg[\"L\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"5E\":\n            // MOV E M\n            genReg[\"E\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"67\":\n            // MOV H A\n            genReg[\"H\"] = genReg[\"A\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"60\":\n            // MOV H B\n            genReg[\"H\"] = genReg[\"B\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"61\":\n            // MOV H C\n            genReg[\"H\"] = genReg[\"C\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"62\":\n            // MOV H D\n            genReg[\"H\"] = genReg[\"D\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"63\":\n            // MOV H E\n            genReg[\"H\"] = genReg[\"E\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"64\":\n            // MOV H H\n\n            numBytes = 1;\n\n            break;\n\n        case \"65\":\n            // MOV H L\n            genReg[\"H\"] = genReg[\"L\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"66\":\n            // MOV H M\n            genReg[\"H\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"6F\":\n            // MOV L A\n            genReg[\"L\"] = genReg[\"A\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"68\":\n            // MOV L B\n            genReg[\"L\"] = genReg[\"B\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"69\":\n            // MOV L C\n            genReg[\"L\"] = genReg[\"C\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"6A\":\n            // MOV L D\n            genReg[\"L\"] = genReg[\"D\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"6B\":\n            // MOV L E\n            genReg[\"L\"] = genReg[\"E\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"6C\":\n            // MOV L H\n            genReg[\"L\"] = genReg[\"H\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"6D\":\n            // MOV L L\n\n            numBytes = 1;\n\n            break;\n\n        case \"6E\":\n            // MOV L M\n            genReg[\"L\"] = genReg[\"M\"];\n\n            numBytes = 1;\n\n            break;\n\n        case \"77\":\n            // MOV M A\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"A\"];\n\n            genReg[\"M\"] = genReg[\"A\"];\n            numBytes = 1;\n\n            break;\n\n        case \"70\":\n            // MOV M B\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"B\"];\n\n            genReg[\"M\"] = genReg[\"B\"];\n            numBytes = 1;\n\n            break;\n\n        case \"71\":\n            // MOV M C\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"C\"];\n\n            genReg[\"M\"] = genReg[\"C\"];\n            numBytes = 1;\n\n            break;\n\n        case \"72\":\n            // MOV M D\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"D\"];\n\n            genReg[\"M\"] = genReg[\"D\"];\n            numBytes = 1;\n\n            break;\n\n        case \"73\":\n            // MOV M E\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"E\"];\n\n            genReg[\"M\"] = genReg[\"E\"];\n            numBytes = 1;\n\n            break;\n\n        case \"74\":\n            // MOV M H\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"H\"];\n\n            genReg[\"M\"] = genReg[\"H\"];\n            numBytes = 1;\n\n            break;\n\n        case \"75\":\n            // MOV M L\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = genReg[\"L\"];\n\n            genReg[\"M\"] = genReg[\"L\"];\n            numBytes = 1;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // MVI statements\n        case \"3E\":\n            // MVI A 8bit_data\n            byte2 = instruction[1];\n            genReg[\"A\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"06\":\n            // MVI B 8bit_data\n            byte2 = instruction[1];\n            genReg[\"B\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"0E\":\n            // MVI C 8bit_data\n            byte2 = instruction[1];\n            genReg[\"C\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"16\":\n            // MVI D 8bit_data\n            byte2 = instruction[1];\n            genReg[\"D\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"1E\":\n            // MVI E 8bit_data\n            byte2 = instruction[1];\n            genReg[\"E\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"26\":\n            // MVI H 8bit_data\n            byte2 = instruction[1];\n            genReg[\"H\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"2E\":\n            // MVI L 8bit_data\n            byte2 = instruction[1];\n            genReg[\"L\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        case \"36\":\n            // MVI M 8bit_data\n            byte2 = instruction[1];\n            tempAdd = genReg[\"H\"] + genReg[\"L\"];\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n            memory[memoryIndex[0]][memoryIndex[1]] = byte2;\n            genReg[\"M\"] = byte2;\n\n            numBytes = 2;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        // STA statement\n        case \"32\":\n            byte3 = instruction[1];\n            byte2 = instruction[2];\n\n            tempAdd = byte2 + byte3;\n            tempAdd = parseInt(tempAdd, 16);\n            memoryIndex = getMemoryIndex(tempAdd);\n\n            memory[[memoryIndex[0]][memoryIndex[1]]] = genReg[\"A\"];\n\n            numBytes = 3;\n\n            break;\n\n        ///////////////////////////////////////////////////////////////////////////////////\n\n        default:\n            console.log(opcode);\n    }\n\n    if (\n        instruction[0] !== \"DA\" &&\n        instruction[0] !== \"FA\" &&\n        instruction[0] !== \"C3\" &&\n        instruction[0] !== \"D2\" &&\n        instruction[0] !== \"C2\" &&\n        instruction[0] !== \"F2\" &&\n        instruction[0] !== \"EA\" &&\n        instruction[0] !== \"E2\" &&\n        instruction[0] !== \"CA\"\n    ) {\n        let pc = genReg[\"PC\"];\n        pc = parseInt(pc, 16) + numBytes;\n        pc = pc.toString(16).toUpperCase().padStart(4, \"0\");\n        genReg[\"PC\"] = pc;\n    }\n\n    return [genReg, flagReg, memory];\n}\n\nexport { execute };\n\n// let input =  {\n//     instructions: [\n//             [ '3E', '09' ],\n//             [ '47' ],\n//             [ '0E', '09' ],\n//             [ '80' ],\n//             [ '0D' ],\n//             [ 'C2', '07', '00' ],\n//             [ '23' ],\n//             [ '86' ],\n//             [ '32', '00', '51' ],\n//             [ '76' ]\n//         ],\n//     \"start-instruction\": 0,\n//     steps: 9,\n//     \"primary-registers\": {\n//         A: \"00\",\n//         B: \"00\",\n//         C: \"00\",\n//         D: \"00\",\n//         E: \"00\",\n//         H: \"00\",\n//         L: \"00\",\n//         M: \"00\",\n//         PC: \"0000\"\n//     },\n\n//     \"flag-registers\": {\n//         S: \"00\",\n//         Z: \"00\",\n//         P: \"00\",\n//         CY: \"00\",\n//         AC: \"00\",\n//     },\n\n//     memory: new Array(4096).fill(0).map(() => new Array(16).fill(0))\n// };\n\n// console.log(execute(input));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bodyOnChange } from \"../Redux/Actions/bodyOnChangeAction\";\nimport {\n    stepLabelForward,\n    stepLabelBackward,\n} from \"../Redux/Actions/assembledOnChangeAction\";\nimport { execute } from \"../Components/Processing/execute\";\n\nexport class Assembled extends Component {\n    // Change editor view\n    onViewChange = (e) => {\n        this.props.bodyOnChange();\n    };\n\n    // Handle run forward\n    onStepForward = (e) => {\n        var propsCopy = JSON.parse(JSON.stringify(this.props));\n\n        if (this.props.labelIndex >= this.props.instructions.length - 1) {\n            this.props.stepLabelForward({\n                final: true,\n            });\n        } else {\n            var inputParams = execute({\n                instructions: propsCopy.opCodes,\n                \"start-instruction\": propsCopy.labelIndex + 1,\n                steps: 1,\n                \"primary-registers\": propsCopy.primaryRegisters,\n                \"flag-registers\": propsCopy.flagRegisters,\n                memory: propsCopy.memory,\n            });\n\n            this.props.stepLabelForward({\n                primaryRegisters: inputParams.primaryRegisters,\n                flagRegisters: inputParams.flagRegisters,\n                memory: inputParams.memory,\n                final: false,\n            });\n        }\n    };\n\n    // Handle run backward\n    onStepBackward = (e) => {\n        this.props.stepLabelBackward();\n    };\n\n    render() {\n        return (\n            <div className=\"assembled-container\">\n                <div className=\"header\">\n                    <h1>Assembled</h1>\n                    <i className=\"fas fa-code\" onClick={this.onViewChange}></i>\n                </div>\n                <div className=\"assembled-child\">\n                    <div className=\"assembled-table\">\n                        {this.props.instructions.map((value, index) => {\n                            return (\n                                <div\n                                    className={\n                                        this.props.labelIndex === index\n                                            ? \"assembled-row coloured\"\n                                            : \"assembled-row\"\n                                    }\n                                    key={index}\n                                >\n                                    {value.endsWith(\":\") ? (\n                                        <React.Fragment>\n                                            <div className=\"assembled-labels\">\n                                                {value}\n                                            </div>\n                                            <div className=\"assembled-instructions\">\n                                                {\n                                                    this.props.instructions[\n                                                        index + 1\n                                                    ]\n                                                }\n                                            </div>\n                                        </React.Fragment>\n                                    ) : (\n                                        <React.Fragment>\n                                            {index === 0 ||\n                                            !this.props.instructions[\n                                                index - 1\n                                            ].endsWith(\":\") ? (\n                                                <React.Fragment>\n                                                    <div className=\"assembled-labels\"></div>\n                                                    <div className=\"assembled-instructions\">\n                                                        {value}\n                                                    </div>\n                                                </React.Fragment>\n                                            ) : (\n                                                <React.Fragment></React.Fragment>\n                                            )}\n                                        </React.Fragment>\n                                    )}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className=\"assembled-navigation\">\n                    {this.props.labelIndex < 0 ? (\n                        <div className=\"navigation-button disabled\">\n                            <i className=\"fas fa-step-backward\"></i>\n                        </div>\n                    ) : (\n                        <div\n                            className=\"navigation-button\"\n                            onClick={this.onStepBackward}\n                        >\n                            <i className=\"fas fa-step-backward\"></i>\n                        </div>\n                    )}\n\n                    <div className=\"navigation-button\">\n                        <i className=\"fas fa-play\"></i>\n                    </div>\n\n                    {this.props.labelIndex >= this.props.instructions.length ? (\n                        <div className=\"navigation-button disabled\">\n                            <i className=\"fas fa-step-forward\"></i>\n                        </div>\n                    ) : (\n                        <div\n                            className=\"navigation-button\"\n                            onClick={this.onStepForward}\n                        >\n                            <i className=\"fas fa-step-forward\"></i>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        editorView: state.bodyReducer.editorView,\n        instructions: state.memoryReducer.instructions,\n        labelIndex: state.assembledReducer.labelIndex,\n        opCodes: state.memoryReducer.opCodes,\n        primaryRegisters: state.registerReducer.primaryRegisters,\n        flagRegisters: state.registerReducer.flagRegisters,\n        memory: state.memoryReducer.memory,\n    };\n};\n\nexport default connect(mapStateToProps, {\n    bodyOnChange,\n    stepLabelForward,\n    stepLabelBackward,\n})(Assembled);\n","import * as actionTypes from \"./types\";\n\nexport const stepLabelForward = (payloadLocal) => (dispatch, getState) => {\n    // Push to stack\n    var stateStackCopy = getState().stackReducer.stateStack;\n\n    stateStackCopy.push({\n        primaryRegisters: getState().registerReducer.primaryRegisters,\n        flagRegisters: getState().registerReducer.flagRegisters,\n        memory: getState().memoryReducer.memory,\n    });\n\n    dispatch({\n        type: actionTypes.STATE_STACK_CHANGE,\n        payload: stateStackCopy,\n    });\n\n    dispatch({\n        type: actionTypes.STEP_LABEL,\n        payload: getState().assembledReducer.labelIndex + 1,\n    });\n\n    if (payloadLocal.final === false) {\n        dispatch({\n            type: actionTypes.REGISTER_CHANGE,\n            payload: {\n                primaryRegisters: payloadLocal.primaryRegisters,\n                flagRegisters: payloadLocal.flagRegisters,\n            },\n        });\n    }\n};\n\nexport const stepLabelBackward = () => (dispatch, getState) => {\n    dispatch({\n        type: actionTypes.STEP_LABEL,\n        payload: getState().assembledReducer.labelIndex - 1,\n    });\n\n    var stateStackCopy = getState().stackReducer.stateStack;\n    var pastStack = stateStackCopy.pop();\n\n    dispatch({\n        type: actionTypes.REGISTER_CHANGE,\n        payload: {\n            primaryRegisters: pastStack.primaryRegisters,\n            flagRegisters: pastStack.flagRegisters,\n        },\n    });\n\n    dispatch({\n        type: actionTypes.STATE_STACK_CHANGE,\n        payload: stateStackCopy,\n    });\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../Styles/BodyStyles.scss\";\nimport { memoryOnStep } from \"../../Redux/Actions/memoryOnChangeAction\";\n\nexport class EntireMemoryView extends Component {\n    // Handle right button clicked\n    onRightNav = () => {\n        this.props.memoryOnStep(this.props.visible + 16);\n    };\n\n    // Handle left button clicked\n    onLeftNav = () => {\n        this.props.memoryOnStep(this.props.visible - 16);\n    };\n\n    render() {\n        var starting = this.props.visible;\n        var ending = starting + 15;\n\n        return (\n            <div className=\"entire-memory-view\">\n                <div className=\"grid\">\n                    <div className=\"grid-element\"></div>\n                    <div className=\"grid-element grid-bold\">0</div>\n                    <div className=\"grid-element grid-bold\">1</div>\n                    <div className=\"grid-element grid-bold\">2</div>\n                    <div className=\"grid-element grid-bold\">3</div>\n                    <div className=\"grid-element grid-bold\">4</div>\n                    <div className=\"grid-element grid-bold\">5</div>\n                    <div className=\"grid-element grid-bold\">6</div>\n                    <div className=\"grid-element grid-bold\">7</div>\n                    <div className=\"grid-element grid-bold\">8</div>\n                    <div className=\"grid-element grid-bold\">9</div>\n                    <div className=\"grid-element grid-bold\">A</div>\n                    <div className=\"grid-element grid-bold\">B</div>\n                    <div className=\"grid-element grid-bold\">C</div>\n                    <div className=\"grid-element grid-bold\">D</div>\n                    <div className=\"grid-element grid-bold\">E</div>\n                    <div className=\"grid-element grid-bold\">F</div>\n\n                    {this.props.memory\n                        .slice(starting, ending + 1)\n                        .map((row, index) => {\n                            return (\n                                <React.Fragment key={index}>\n                                    <div className=\"grid-element grid-bold\">\n                                        {(\n                                            \"000\" +\n                                            (this.props.visible + index)\n                                                .toString(16)\n                                                .toUpperCase()\n                                        ).slice(-3) + \"0\"}\n                                    </div>\n                                    {row.map((value, i) => {\n                                        return (\n                                            <div\n                                                key={i}\n                                                className=\"grid-element\"\n                                            >\n                                                {(\"0\" + value).slice(-2)}\n                                            </div>\n                                        );\n                                    })}\n                                </React.Fragment>\n                            );\n                        })}\n                </div>\n\n                <div className=\"navigation\">\n                    {this.props.visible > 0 ? (\n                        <i\n                            className=\"fas fa-chevron-left\"\n                            onClick={this.onLeftNav}\n                        ></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-left disabled\"></i>\n                    )}\n\n                    <div className=\"current\">\n                        {(\"0000\" + starting.toString(16))\n                            .slice(-3)\n                            .toUpperCase() + \"0\"}{\" \"}\n                        -&nbsp;\n                        {(\"0000\" + ending.toString(16))\n                            .slice(-3)\n                            .toUpperCase() + \"F\"}\n                    </div>\n\n                    {this.props.visible !== 4080 ? (\n                        <i\n                            className=\"fas fa-chevron-right\"\n                            onClick={this.onRightNav}\n                        ></i>\n                    ) : (\n                        <i className=\"fas fa-chevron-right disabled\"></i>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        memory: state.memoryReducer.memory,\n        visible: state.memoryReducer.visible,\n    };\n};\n\nexport default connect(mapStateToProps, { memoryOnStep })(EntireMemoryView);\n","import React from \"react\";\n\nfunction LoadedMemoryView() {\n    return <div className=\"loaded-memory-view\"></div>;\n}\n\nexport default LoadedMemoryView;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Styles/BodyStyles.scss\";\nimport EntireMemoryView from \"./MemoryViews/EntireMemoryView\";\nimport LoadedMemoryView from \"./MemoryViews/LoadedMemoryView\";\nimport {\n    memoryOnReset,\n    memoryOnStep,\n} from \"../Redux/Actions/memoryOnChangeAction\";\n\nexport class Memory extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            memoryView: \"entire-memory\",\n            jumpText: \"\",\n            jumpTo: 0,\n        };\n    }\n\n    // Switch views between entire memory and loaded memory\n    onMemoryViewChange = (e) => {\n        this.setState({\n            memoryView: e.target.value,\n        });\n    };\n\n    onMemoryReset = (e) => {\n        this.props.memoryOnReset();\n    };\n\n    // Handle Jump To Address input field\n    onJumpToChange = (e) => {\n        var re = /^$|^([0-9A-F]){1,4}$/;\n        if (!re.test(e.target.value.toUpperCase())) {\n            return;\n        }\n\n        this.setState({\n            jumpText: e.target.value.toUpperCase(),\n        });\n    };\n\n    // Handle Enter button pressed on Jump To Address input field\n    onJumpEnter = (e) => {\n        if (e.key === \"Enter\") {\n            this.props.memoryOnStep(\n                Math.floor(\n                    parseInt(\"0000\" + e.target.value.slice(0, -1), 16) / 16\n                ) * 16\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"memory-container\">\n                <div className=\"header\">\n                    <h1>Memory</h1>\n                    {this.state.memoryView === \"entire-memory\" ? (\n                        <div className=\"header-tail\">\n                            <i\n                                className=\"fas fa-sync\"\n                                onClick={this.onMemoryReset}\n                            ></i>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Jump to\"\n                                value={this.state.jumpText}\n                                onChange={this.onJumpToChange}\n                                onKeyDown={this.onJumpEnter}\n                            ></input>\n                        </div>\n                    ) : null}\n                </div>\n\n                {this.state.memoryView === \"entire-memory\" ? (\n                    <EntireMemoryView />\n                ) : (\n                    <LoadedMemoryView />\n                )}\n\n                <div className=\"memory-views\">\n                    <div className=\"radio-item\">\n                        <input\n                            type=\"radio\"\n                            value=\"entire-memory\"\n                            name=\"memory-view\"\n                            checked={this.state.memoryView === \"entire-memory\"}\n                            onChange={this.onMemoryViewChange}\n                        />\n                        <label>Entire Memory</label>\n                    </div>\n                    <div className=\"radio-item\">\n                        <input\n                            type=\"radio\"\n                            value=\"loaded-memory\"\n                            name=\"memory-view\"\n                            checked={this.state.memoryView === \"loaded-memory\"}\n                            onChange={this.onMemoryViewChange}\n                        />\n                        <label>Loaded Memory</label>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { memoryOnReset, memoryOnStep })(Memory);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Styles/BodyStyles.scss\";\nimport Registers from \"./Registers\";\nimport Editor from \"./Editor\";\nimport Assembled from \"./Assembled\";\nimport Memory from \"./Memory\";\n\nexport class Body extends Component {\n    render() {\n        return (\n            <div className=\"body\">\n                <Registers />\n                {this.props.editorView ? <Editor /> : <Assembled />}\n                <Memory />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        editorView: state.bodyReducer.editorView,\n    };\n};\n\nexport default connect(mapStateToProps)(Body);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../App.scss\";\nimport { editorOnUpload } from \"../Redux/Actions/editorOnChangeAction\";\n\nexport class PopupWindow extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: false,\n        };\n    }\n\n    dropRef = React.createRef();\n\n    componentDidMount = () => {\n        let div = this.dropRef.current;\n        this.dragCounter = 0;\n        div.addEventListener(\"dragenter\", this.handleDragIn);\n        div.addEventListener(\"dragleave\", this.handleDragOut);\n        div.addEventListener(\"dragover\", this.handleDrag);\n        div.addEventListener(\"drop\", this.handleDrop);\n    };\n\n    componentWillUnmount() {\n        let div = this.dropRef.current;\n        div.removeEventListener(\"dragenter\", this.handleDragIn);\n        div.removeEventListener(\"dragleave\", this.handleDragOut);\n        div.removeEventListener(\"dragover\", this.handleDrag);\n        div.removeEventListener(\"drop\", this.handleDrop);\n    }\n\n    handleDrag = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n    handleDragIn = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter++;\n        if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n            this.setState({ dragging: true });\n        }\n    };\n    handleDragOut = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragCounter--;\n        if (this.dragCounter === 0) {\n            this.setState({ dragging: false });\n        }\n    };\n    handleDrop = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        var fileReader = new FileReader();\n\n        fileReader.addEventListener(\"load\", (e) => {\n            console.log(e);\n            this.props.editorOnUpload(e.target.result);\n        });\n\n        if (e.dataTransfer.files.length > 1) {\n            alert(\"Please upload only one file\");\n        } else {\n            fileReader.readAsText(e.dataTransfer.files[0]);\n        }\n    };\n\n    render() {\n        return (\n            <div ref={this.dropRef} className=\"fileUploadWindow\">\n                <div\n                    className={\n                        this.state.dragging\n                            ? \"inner-window bright\"\n                            : \"inner-window\"\n                    }\n                >\n                    <div className=\"desc\">\n                        <i className=\"fas fa-cloud-upload-alt\"></i>\n                    </div>\n\n                    <div className=\"desc\">Drag & Drop Here</div>\n                    <div className=\"desc\">or</div>\n                    <div className=\"desc\">\n                        <div className=\"browse-button\">Browse Files</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { editorOnUpload })(PopupWindow);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.scss\";\nimport Navbar from \"./Components/Navbar\";\nimport Body from \"./Components/Body\";\nimport PopupWindow from \"./Components/PopupWindow.jsx\";\n\nexport class App extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.popupView ? (\n                    <div className=\"popupView\">\n                        <PopupWindow />\n                    </div>\n                ) : null}\n                <div className=\"global-container\">\n                    <Navbar />\n                    <Body />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        popupView: state.bodyReducer.popupView,\n    };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}